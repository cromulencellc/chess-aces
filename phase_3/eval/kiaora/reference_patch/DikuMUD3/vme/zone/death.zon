/*
filename    death
password    realworld
changedby   Whistler
EmailAdd     Marc Bellemare <baam@erols.com>
request     compile
version     1
END HEADER*/

#include <macros.h>

%zone death
title ""

lifespan 20
reset RESET_NOT

creators {"whistler"}

#define CORPSE_EXTRA  "$CORPSE_EXTRA"
#define CORPSE_FILE  "$CORPSE_FILE"
#define CORPSE_TIME  "$CORPSE_TIME"
#define CORPSE_HOMETOWN "$CORPSE_HOMETOWN"

%dil


dilbegin death_bell(s:string);
code
{
    /*
    the s is not used yet but maybe some day.
    */

    act ("A loud bell rings a mournful tone and goes silent quickly.",
    A_ALWAYS,self.inside,null,null,TO_ALL);
    
    act("The few patrons lift their drinks and say, 'To absent friends.'", 
      A_ALWAYS,self.inside,null,null,TO_ALL);
    quit;
}
dilend



dilbegin rot_head();
code
{
   heartbeat := PULSE_SEC *15;

   :loop:
   pause;

if (self.extra.["$head_time"]==null)
 {
      if (not isset(self.flags, UNIT_FL_BURIED))
        act("$1n is consumed by some smelly maggots.", A_SOMEONE, self, null, null, TO_ROOM);
      destroy(self);
  quit;
  }
if ((realtime-atoi(self.extra.["$head_time"].descr))>1800  )
 {
      if (not isset(self.flags, UNIT_FL_BURIED))
        act("$1n is consumed by some smelly maggots.", A_SOMEONE, self, null, null, TO_ROOM);
      destroy(self);
  quit;
  }

   goto loop;
}
dilend


dilbegin piunwizinv();

var
 u:unitptr;
 i:integer;
code
{
heartbeat:=3;
i:=dildestroy("noaction@death",self);
u:=self.inside;
while (u!=null)
{
   if (u.zoneidx=="treasure")
   {
      u.minv := 0;

      act("Suddenly $3n appears before you.",
          A_SOMEONE, self, null, u, TO_CHAR);

      act("Suddenly $3n appears before $1n.",
          A_HIDEINV, self, null, u, TO_ROOM);

   }

u:=u.next;
}
quit;
}
dilend


dilbegin statue(arg:string);
var
   rltime:integer;
code
{
   // heartbeat:=3;
   rltime:=realtime;
   addextra (self.extra, {CORPSE_FILE},"statue_"+arg+"."+itoa(rltime));
   addextra (self.extra, {CORPSE_TIME},itoa(rltime));
   store(self,"statue_"+arg+"."+itoa(rltime),TRUE);
   quit;
}
dilend


dilbegin death_clear();
var
   i:integer;
code
{
   // heartbeat:=3;
   i:=delunit(self.extra.["$CORPSE_FILE"].descr);
   destroy(self);
}
dilend



dilbegin integer min(a:integer,b:integer);
code
{
heartbeat:=3;
if (a<b)
	return (a);
else
	return (b);
	}
	dilend

dilbegin integer max(a:integer,b:integer);
code
{
heartbeat:=3;
if (a>b)
	return (a);
else
	return (b);
	}
	dilend



/*
The following two dils are commands that had to be modified to work for death.
*/
// 2021 - heads now carry an extra "$living_sym" that contains the symname of it's
// host in life. This is useful for quests, and stuff.
// do_decapitate
dilbegin decap(arg : string); /* Decapitating corpses */
external
   unitptr find_here@commands (s:string);

var
   item      : unitptr;
   corpse    : unitptr;
   reward_exp : extraptr;
   nextdude   : extraptr;
   temp_lst  : stringlist;
   temp_str2:string;
   temp_str  : string;
   test_expt : extraptr;
   headless:string;
   chk : integer;
   living_sym : string;

code
{
   heartbeat:=3;
   if (arg == "")
   {
      act("What corpse do you wish to decapitate?", A_ALWAYS, self, null, null, TO_CHAR);
      quit;
   }

   corpse := find_here@commands(arg);

   if ((not(corpse)) or (corpse.type != UNIT_ST_OBJ))
   {
      act("No such corpse around.", A_ALWAYS, self, null, null, TO_CHAR);
      quit;
   }

   if ("headless" in corpse.outside_descr)
   {
      act("Huh? That can't be done.", A_ALWAYS, self, null, null, TO_CHAR);
      quit;
   }

   if ((corpse.nameidx != "corpse") or (corpse.zoneidx != "death"))
   {
      act("Huh? That can't be done.", A_ALWAYS, self, null, null, TO_CHAR);
      quit;
   }

   chk := (corpse.value[4]);
   if ( ((chk > RACE_CNIDARIA_MIN) and (chk <= RACE_CNIDARIA_MAX)) or
        ((chk > RACE_PLANT_MIN) and (chk <= RACE_PLANT_MAX)) )
   {
      act("There is no head on that corpse silly!" ,
         A_SOMEONE, self, null,null, TO_CHAR);
      quit;
   }

	living_sym := corpse.extra.["$living_sym"].descr;
	
   act("You brutally decapitate a corpse.", A_ALWAYS, self, null, null, TO_CHAR);
   act("$1n brutally decapitates a corpse.", A_SOMEONE, self, null, null, TO_REST);
   item := load("head@death");
   addextra (item.extra,{"$head_time"},itoa(realtime));
   addextra (item.extra,{"$living_sym"},living_sym);
   dilcopy ("rot_head@death",item);
   // If corpse has a reward on it copy it to the head.
 
   reward_exp := "$reward" in corpse.extra;
   while (reward_exp)
   {
      nextdude := "$reward" in reward_exp.next;
      addextra(item.extra, reward_exp.names,reward_exp.descr);
      subextra(corpse.extra, "$reward");
      reward_exp := nextdude;
   }
 
   item.minv := 200;
   link(item, self.outside);

   chk := (corpse.value[4]);
   if ((chk > RACE_ARTHROPODA_MIN) and (chk <= RACE_ARTHROPODA_MAX)) 
   {
      set_weight_base(item, corpse.baseweight/70);
   }
   else
      set_weight_base(item, corpse.baseweight/30);

   if (item.baseweight > 100)
   {
      set_weight_base(item, 100);
   }

   if (item.baseweight < 1)
   {
      set_weight_base(item, 1);
   }

   set_weight_base(item, item.baseweight);
   item.minv := 0;
   temp_str2 :=corpse.outside_descr;
   temp_str := getword(temp_str2);
   temp_str := getword(temp_str2);
   temp_str := getword(temp_str2);
   temp_str:=temp_str2;
   item.outside_descr := "The decapitated head of " + temp_str ;
   addextra(item.extra, {""}, "The head has been severed from the body");
   headless:=left(corpse.title,length(corpse.title)-6);
   corpse.title:=headless+"headless corpse";

   corpse.outside_descr:="The headless corpse of "+temp_str;
   addextra(corpse.extra, {""}, "The head has been severed from the body");
   item.value[2] := corpse.value[2];
   item.value[3] := corpse.value[3];
   quit;
}
dilend /* decapitate */


dilbegin gcrps (arg:string);
code
{
   heartbeat:=3;
   if (self.level < 200)
   {
      act("Arglebargle, glop-glyf!?!", A_ALWAYS, self, null, null, TO_CHAR);
      quit;
   }

   act("The following corpses were found:", A_ALWAYS,self,null,null,TO_CHAR);
   sendtoalldil("reportgod","report_corpse@death");
   quit;
}
dilend



dilbegin bob_code();
var
  arg:string;
  pc:unitptr;
  pars:string;
  item:unitptr;
  ex_ptr:extraptr;
  splstr:string;
  splno:integer;
code
{
heartbeat:=PULSE_SEC*3;
if (self.value[2]!=1) quit;
interrupt (SFB_PRE,((command ("cast")) and
(target==self)),bl_animate);

:start:
unsecure(pc);
unsecure(item);
interrupt (SFB_CMD, command("get") or command("take"), get_stuf);

wait (SFB_CMD, command("get") or command("take"));
:get_stuf:

if (isset(self.flags,UNIT_FL_BURIED))
 goto start;
pc:=activator;
secure (pc,start);

arg:=argument;

pars:=getword(argument);
while ((pars!="") and (pars!="from"))
  {
  pars:=getword (argument);
  }

if (pars=="") goto start;

item:=findunit (pc,argument, FIND_UNIT_SURRO,null);
if ( item ==null)
  goto start;
secure (item,start);

if (item!=self) goto start;

if ((pc.type==UNIT_ST_NPC) and
(pc.master))
{
block;
goto start;
}

if ((("corpse of "+pc.name) == item.name) or
(("statue of "+pc.name) == item.name))
goto start;

block;

act ("You can't loot a player corpse.", A_ALWAYS,pc,null,null,TO_CHAR);
goto start;

:bl_animate:
if (self!=target) goto start;
splstr:= getword(argument);
splno:= atoi(splstr);
if (splno==81)
{
power:=-1;
  block;
  act ("Making a Zombie from a fellow players corpse is forbiden.",
  A_ALWAYS,activator,null,null,TO_CHAR);
  goto start;
  }

}
dilend


// realtime is C time(0), i.e. counting seconds
//
// I'm wondering why we're using realtime rather than just pauses... ?
//    Probably because the corpse can be stored and loaded...
//
dilbegin recall rot_corpse();
var
   n : integer; /*amount of hours since created*/
   i : integer;
   s : string;
   bHometown : integer;
   corpse_room : unitptr;
   item : unitptr;
   nxt  : unitptr;
code
{
   heartbeat:=PULSE_SEC;
   pause; // IMPORTANT. OTHERWISE THE VALUES WONT GET SET because the code will run on load()
   pause;

   bHometown := 0;

   if (self.value[2] == 1) // corpse is a player corpse
   {
      bHometown := (self.extra.[CORPSE_HOMETOWN] != null);

      if (bHometown)
      {
         i := PULSE_SEC * SECS_PER_REAL_MIN * 20; // roughly 4*20m before potential player corpse recall
      }
      else
      {
         i := PULSE_SEC * SECS_PER_REAL_HOUR * 8; // ~4*8 hours
      }
   }
   else
      i := PULSE_SEC * SECS_PER_REAL_MIN * 5; // 4*5 minutes

   n := atoi(self.extra.[CORPSE_TIME].descr);

   heartbeat := i;  // first a pause, then 3 states / pause, then dissolve (or restart) 

:start:
   /* if (self.value[2] == 1)
   {
      if (self.inside == null) 
         s := " empty ";
      else
         s := " has inventory ";
      log("Player: " + self.name + s + " begins to rot extra: " + self.extra.[CORPSE_TIME].descr + " realtime="+itoa(realtime));
   } */

   pause;
   if ((not isset(self.flags, UNIT_FL_BURIED)) and (not bHometown))
   {
      act(self.extra.["$rotact"].names.[1], A_HIDEINV, self, null, null, TO_ALL);
      self.outside_descr := self.extra.["$rot"].names.[1];
   }

   pause;
   if ((not isset(self.flags, UNIT_FL_BURIED)) and (not bHometown))
   {
      act(self.extra.["$rotact"].names.[2], A_HIDEINV,self,null,null,TO_ALL);
      self.outside_descr := self.extra.["$rot"].names.[2];
   }

   pause;
   if ((not isset(self.flags, UNIT_FL_BURIED)) and (not bHometown))
   {
      act(self.extra.["$rotact"].names.[3], A_HIDEINV,self,null,null,TO_ALL);
      self.outside_descr := self.extra.["$rot"].names.[3];
   }

   pause;
   if ((self.value[2] == 1) and bHometown and (self.inside != null))
   {
      corpse_room := findroom(self.extra.[CORPSE_HOMETOWN].descr);
      if (corpse_room == null)
         corpse_room := findroom("temple@udgaard");

      if (self.outside == corpse_room)
         goto dissolve;  // Must be the second time we are here, remove it.

      act("$1n and everything in it dissolve into magical dust, floating away into the air.", A_HIDEINV, self, null, null, TO_ALL);
      link(self, corpse_room);
      act("The ashes of a body float down from the sky and form into $1n.", A_HIDEINV, self, null, null, TO_ALL);
      log("Rescued " + self.name + " instead of destroying it.");
      bHometown := 0; // Important, this round we begin to 'rot'
      i := PULSE_SEC * SECS_PER_REAL_HOUR * 8; // ~4*8 hours
      goto start; // Do it all again, but this time in the corpse_room
   }
   else
   {
:dissolve:
      if (not (isset(self.flags, UNIT_FL_BURIED)))
         act(self.extra.["$rotact"].names.[4], A_HIDEINV, self, null,null,TO_ALL);

      if (self.extra.[CORPSE_FILE] != null)
      {
         i := delunit(self.extra.[CORPSE_FILE].descr);
         log("DELETED stored player corpse " + self.extra.[CORPSE_FILE].descr + " " + itoa(i));
      }

      if (self.value[2] == 1) // player
      {
         // Last chance to resuce equipment
         item := self.inside;
         while (item)
         {
            nxt := item.next;
            link(item, self.outside);
            item := nxt;
         }
      }

      destroy(self);
   }

   quit;
}
dilend


dilbegin remove_corpse();
var
	x:extraptr;
	i:integer;
code
{
heartbeat:=3;
interrupt (SFB_DONE,command("get") and (self==medium),jump);

if (self.value[2]!=1) quit;
if (self.inside==null)
  {
  x:=CORPSE_FILE in self.extra;
if (x!=null)
	{
i:=delunit(x.descr);
		quit;
		}
  }
:start:
heartbeat:=PULSE_SEC*3;
wait (SFB_DONE,command("get") and (self==medium));
:jump:
x:=CORPSE_FILE in self.extra;
if (x!=null)
	{
i:=delunit(x.descr);
		quit;
		}
goto start;
}
dilend


dilbegin unitptr findcrproom(u:unitptr);
var
	rm:unitptr;
	rmstr:string;
code
{
   rm:=u;
   while(rm.type != UNIT_ST_ROOM)
   	rm := rm.outside;

   return (rm);

/*
if ((rm.movement!=SECT_WATER_SWIM) and (rm.movement!=SECT_WATER_SAIL))
i:=0;
while (i<=MAX_EXIT)
	{
	if (rm.exit_to[i])
		rmstr:=findcrproom(rm.exit_to[i]);
	else
	if (rmstr!="NOROOM")
		break;
		i:=i+1;
	}

if (i>MAX_EXIT)
	return ("NOROOM");
else
	return (rmstr);
	*/
}
dilend




dilbegin aware reload_corpse();
var
	corpselist:stringlist;
	u:unitptr;
	ln:integer;
	i:integer;
	x:extraptr;
code
{
heartbeat:=3;
corpselist:=unitdir(".*");
ln:=length(corpselist);

i:=0;
while (i<ln)
	{
	u:=restore(corpselist.[i],null);
	x:=CORPSE_EXTRA in u.extra;
	if (u!=null)
		if (x!=null)
			link (u,findroom(x.descr));
		else
			link (u,findroom("temple@udgaard"));
	i:=i+1;
	}

quit;
}
dilend



dilbegin gain_exp(u:unitptr, gain:integer);
var
	j:integer;
code
{
   heartbeat:=3;
   if (u.type!=UNIT_ST_PC)
      return;

   if (gain > 0)
   {
      if (gain >= self.exptol)
         sendtext("You can now raise a level by using the 'level' command!<br/>",self);

   	experience (gain,self);
	}
   else  /* gain <= 0 */
	{
      // Dont lose XP until you're level 3
      if (self.level >= 3)
      {
         // Ignore any loss leaing to less than 1650 XP
         if ((self.exp+gain) > 1650)
            experience(gain,self);
      }
   }
   return;
}
dilend


dilbegin recall unique fnpri(FN_PRI_DEATH) death_seq();
var
    room:unitptr;
    i : integer;
code
{
    priority; /* Disable any DILs below this */
    heartbeat:=3;
    self.hp  := self.max_hp;
    heartbeat := PULSE_SEC * 3;
    sendto("remove kill protection",self);
    dilcopy("no_kill@function",self);

    act("There is complete silence, you are floating in utter darkness.",
        A_ALWAYS, self, null, null, TO_CHAR);
    pause;

    act("Through the darkness you see a white light in the distance.",
        A_ALWAYS, self, null, null, TO_CHAR);
    pause;

    act("The light grows larger and more intense, it seems to resemble a "+
        "warrior flying through the darkness.",
        A_ALWAYS, self, null, null, TO_CHAR);
    pause;

    act("The warrior takes your soul, and at that very instant you can see the"+
        " world around you. You are in the arms of a beautiful Valkyrie, she "+
        "begins to fly towards the stars.",
        A_ALWAYS, self, null, null, TO_CHAR);
    pause;

    act("The world is rapidly disappearing below you, as the Valkyrie rides "+
        "towards the stars at an amazing speed.",
        A_ALWAYS, self, null, null, TO_CHAR);
    pause;

    if (self.quests.["New Player Helper"] != null)
    {
        act("After a short ride she sets your spirit down inside Ginger's thrown room. "+
        "You slowly regain a more material form.",
            A_ALWAYS, self, null, null, TO_CHAR);
        act("$1n enters the castle of Valhalla.",
            A_ALWAYS, self, null, null, TO_ROOM);
        link(self, findroom("throne_room2@basis"));
    }
    else if (self.alignment>249)
    {
        act("After a short ride she sets your spirit down inside Valhalla. You "+
            "slowly regain a more material form.",
            A_ALWAYS, self, null, null, TO_CHAR);
        act("$1n enters the castle of Valhalla.",
            A_ALWAYS, self, null, null, TO_ROOM);
        link(self, findroom("heaven_entry@basis"));
    }
    else if (self.alignment<-249)
    {
        act("After a short ride she throws you down into the pits of hell.  You "+
          "slowly regain a more material form instantly feeling the heat.",
          A_ALWAYS, self, null, null, TO_CHAR);
        act("$1n enters the pits of hell.",
          A_ALWAYS, self, null, null, TO_ROOM);
        link(self, findroom("hell_entry@basis"));
    }
    else
    {
        act("After a short ride she lets your spirit drift into the astral planes."+
        "You slowly regain your senses.",
            A_ALWAYS, self, null, null, TO_CHAR);
        act("$1n floats into the astral planes.",
            A_ALWAYS, self, null, null, TO_ROOM);
        link(self, findroom("entry1@basis"));
    }

    i:=dildestroy("noaction@death",self);
    self.hp:=self.max_hp;
    self.endurance:=self.max_endurance;
    self.mana:=self.max_mana;
    self.full:=24;
    self.thirst:=24;

    self.position := POSITION_RESTING;

    if (self.level<=5)
      heartbeat:=PULSE_SEC*45;
    else if (self.level<25)
      heartbeat:=PULSE_SEC*120;
    else
      heartbeat:=PULSE_SEC*180;

    pause;
    act("You feel strange.", A_ALWAYS,self,null,null,TO_CHAR);
    act("$1n shimmers and vanishes.", A_ALWAYS,self,null,null,TO_REST);

    unset(self.pcflags,PC_SPIRIT);
    unset(self.charflags,CHAR_KILL_SELF);
    room:=findroom(self.hometown);
    if (room!=null)
      link (self,findroom(self.hometown));
    else
      link (self,findroom("temple@udgaard"));
    dilcopy ("piunwizinv@death()",self);
    exec("look",self);
    return;
}
dilend


dilbegin unique fnpri(FN_PRI_DEATH+1) noaction();
code
{
   heartbeat:=3;
   :loop:
   wait(SFB_CMD, activator == self);
   if (command("tell"))  // Allow the tell command
      goto loop;

   if (activator.level < IMMORTAL_LEVEL)
   {
      act("You are dead, don't move!",
          A_ALWAYS, self.outside, null, null, TO_CHAR);
      block;
   }

   goto loop;
}
dilend


/* Corpse data is as follows:
 *   corpse.baseweight and corpse.weight set to self's baseweight
 *   corpse.height set to char's height
 *   value[2] is 1 if PC 0 if NPC
 *   value[3] is the char's level
 *   value[4] is the char's race
 *   "$living_sym" in corpse.extra == self.symname of pc/npc.
 *
 * Code is running on the CHAR that is about to be made to a corpse (self).
 * sCorpseLoad is the symname of the corpse 'template' to load
 * Corpse is by default placed in the room the char dies in.
 *
 * returns null if no corpse was made (e.g. familiar unwinds magic), or
 *         pointer to new corpse.
*/

dilbegin unitptr make_corpse(sCorpseLoad : string);
external
   unitptr findcrproom(u:unitptr);
   die@justice(crp : unitptr);
var
   rltime:integer;
   corpseroom:unitptr;
   crp:unitptr;
   item:unitptr;
   temp:unitptr;
   exd : extraptr;

code
{
   heartbeat := PULSE_SEC;
   
   if (self.symname == "familiar2@g_q")
   {
		act("The familiar's magic unwinds and it fades from this plane of existance.",
			A_ALWAYS,self,null,null,TO_ALL);
      crp := null;
      return (crp);
   }

   crp := load(sCorpseLoad); // e.g. "corpse@death", "statue?"

   // Fix corpse's description
   //

   // corpse.name.[0] = "corpse of $1n"
   // corpse.title = "$1n's corpse"
   // corpse.descr = "$1n's corpse is lying here."
   crp.names.[0] := sact(crp.names.[0], A_ALWAYS, self, crp, null, TO_CHAR);
   crp.title := sact(crp.title, A_ALWAYS, self, crp, null, TO_CHAR);
   crp.outside_descr := sact(crp.outside_descr, A_ALWAYS, self, crp, null, TO_CHAR);
   exd := "$rot" in crp.extra;
   if (exd)
   {
      exd.names.[1] := sact(exd.names.[1], A_ALWAYS, self, crp, null, TO_CHAR);
      exd.names.[2] := sact(exd.names.[2], A_ALWAYS, self, crp, null, TO_CHAR);
      exd.names.[3] := sact(exd.names.[3], A_ALWAYS, self, crp, null, TO_CHAR);      
   }

   // Copy important values to corpse
   //
   set_weight_base(crp, self.baseweight);
   set_weight(crp, self.baseweight);
   crp.height:=self.height;
  
   if (self.type==UNIT_ST_NPC)
   {
      crp.value[2]:=0;
      crp.value[3]:=self.level;
   }
   else
   {
      crp.value[2]:=1;
      crp.value[3]:=self.vlevel;
   }
   crp.value[4] := self.race;
   
   addextra(crp.extra, {"$living_sym"}, self.symname);
   if (isset(self.pcflags, PC_PK_RELAXED))
      addextra(crp.extra, {"$BOB"}, "");

   // Transfer victim's items to corpse
   //
   //   
   item := self.inside;
   while (item != null)
   {
      temp := item.next;
      unequip(item);

      // Items on players that are from the treasure zone or minv < 51 stay inside the player
      if ((self.type != UNIT_ST_PC) or ((item.zoneidx != "treasure") and (item.minv < 51)))
      {
         link(item, crp);
      }
      else
      {
         item.minv := 200;  // Stays inside the PC
      }
      item := temp;
   } 


   // Process justice when dead
   //
   die@justice(crp);


   // Set up corpse decay and saving of items
   //
   rltime := realtime;
   corpseroom := findcrproom(self);
   addextra(crp.extra, {CORPSE_TIME}, itoa(rltime));

   if (self.type==UNIT_ST_PC)
   {
      if ("Soul Anchor Request Complete" in self.quests)
      {
         addextra(crp.extra, {CORPSE_HOMETOWN}, self.hometown);
      }
      addextra(crp.extra, {CORPSE_EXTRA}, corpseroom.symname);

      addextra(crp.extra, {CORPSE_FILE}, "corpse_"+self.name+"."+itoa(rltime));
      store(crp, "corpse_"+self.name+"."+itoa(rltime), TRUE);
      dilcopy("partial_get@death", crp);
   }

   dilcopy("remove_corpse@death", crp);

   link(crp, corpseroom);

   return (crp);
}
dilend

// Save the corpse if someone gets its items.
//
dilbegin aware partial_get();
code
{
   :start:
   wait(SFB_DONE, ((command("get") or command("take")) and (self.inside == target)));
   store(self, self.extra.[CORPSE_FILE].descr, TRUE);
   goto start;
}
dilend


dilbegin remove_aff();
var
   i:integer;
code
{
   heartbeat:=3;
   i:=0;
   while (i<100)
   {
      if (isaff(self,i))
      {
         subaff(self,i);
         continue;
      }
      i:=i+1;
   }

   while (dilfind("panic@spells",self))
      i:=dildestroy("panic@spells",self);

   while (dilfind("spl_poison@spells",self))
      i:=dildestroy("spl_poison@spells",self);

   while (dilfind("hammer@spells",self))
      i:=dildestroy("hammer@spells",self);

   while (dilfind("no_flee@spells",self))
      i:=dildestroy("no_flee@spells",self);

   while (dilfind("spl_madness@spells",self))
      i:=dildestroy("spl_madness@spells",self);

   while (dilfind("spl_sleep@spells",self))
      i:=dildestroy("spl_sleep@spells",self);

   return;
}
dilend




dilbegin raw_kill();
external
   unitptr make_corpse(sCorpseLoad : string);
   remove_aff();
   death_cry();
   rem_db_entry@justice(criminal : unitptr, extra_type : string, juris: string);
   integer  valid_extra@justice(criminal : unitptr, extra_type : string, juris : string);
var
   exd : extraptr;
   u : unitptr;
code
{
   heartbeat:=3;

   if (self.type==UNIT_ST_PC)
   {
      set(self.pcflags,PC_SPIRIT);
      dilcopy("noaction@death",self);
      // No such room any more... dilcopy ("death_bell@death("+self.name+")",findroom("moot_nowe@udgaard")); 

      if ("$TOTAL_DEATHS" in self.extra)
         self.extra.["$TOTAL_DEATHS"].vals.[0]:=self.extra.["$TOTAL_DEATHS"].vals.[0]+1;
      else
         addextra(self.extra,{"$TOTAL_DEATHS"},itoa(realtime),{1});
   }

   sendtext("You are dead. R.I.P.<br/>",self);
   death_cry();

   exd := self.extra.["$petrify"]; 
   if (exd)
   {
      u := make_corpse("corpse_statue@death");
      u.spells[SPL_PETRIFY] := atoi(exd.descr);
      subextra(self.extra, "$petrify");
   }
   else
      make_corpse("corpse@death");

   //Remove extras just Justice DB
     rem_db_entry@justice(self,"$reward","all");

   stop_fighting(self, null);
   self.position:=POSITION_DEAD;

   if (self.type==UNIT_ST_NPC)
      destroy(self);
   else
   {
      remove_aff();
      // self.weight:=self.baseweight;
      link(self, findroom("deathseq_room@basis"));
      dilcopy("death_seq@death", self);
   }
   return;
}
dilend




dilbegin integer lose_exp(u:unitptr);
external
	integer max(a:integer,b:integer);
	integer min(a:integer,b:integer);

var
	loss:integer;
	l0:integer; // XP required to your current level
	l1:integer; // XP required to your current level+1

code
{
   heartbeat:=3;
   if (u.type != UNIT_ST_PC)
      return(0);

   /* Up to level 3 is sacred experience                          */
   if (u.vlevel <= 3)
      return(0);

   /* This first line takes care of any xp earned above required level. */
   l0 := getinteger(DIL_GINT_REQXP, null, u.vlevel);
   l1 := getinteger(DIL_GINT_REQXP, null, u.vlevel+1);
   log("l1 = " + itoa(l1) + "   l0 = " + itoa(l0) + "   l1-l0 = " + itoa(l1-l0));

   // Lose half the XP earned above your current level (you should level up)
   loss := max(0, (u.exp-l0)/2);
   log("loss 1 = " + itoa(loss));

   /* This line makes sure, that you lose at most half a level...       */
   loss := min(loss, (l1-l0)/2);
   log("loss 2 = " + itoa(loss));

   /* This line takes care of the case where you have less or almost    */
   /* equal XP to your required. You thus lose at least 1/5th your      */
   /* level.                                                            */
   loss := max(loss, (l1-l0)/5);
   log("loss 3 = " + itoa(loss));

   if (loss < 0)
      loss:=0;

   log("loss result = " + itoa(loss));

   return(loss);
}
dilend



dilbegin death();
external
   raw_kill ();
   integer lose_exp(u:unitptr);
   gain_exp(u:unitptr,gain:integer);
   integer  valid_extra@justice(criminal : unitptr, extra_type : string);
var
	gain:integer;
        i:integer;
code
{
   heartbeat:=3;
   if ((dilfind("death_seq@death",self)) or (dilfind ("raw_kill@death",self)))
      return;

   if (self.type==UNIT_ST_NPC)
      if ((self.outside.nameidx=="destroy_room") and (self.outside.zoneidx=="basis"))
         quit;

   if (dilfind("pc_arena@arena",self))
   {
      dilcopy ("arena_death@arena()",self);
      quit;
   }

   if (self.type == UNIT_ST_PC)
   {
        if(not(isset(self.charflags, CHAR_PROTECTED)))
           set(self.charflags, CHAR_PROTECTED);
   	if(isset(self.charflags, CHAR_OUTLAW))
           unset(self.charflags,CHAR_OUTLAW);
        if(dilfind("jailstay@midgaard", self))
          i := dildestroy("jailstay@midgaard", self); //Kill the jalstay DIL if they die in jail.

   }
   if (isset(self.charflags,CHAR_KILL_SELF))
	{
      raw_kill();
      quit;
	}

   gain := 0;
   if ((self.type==UNIT_ST_PC) and (self.level<200))
   {
      gain := lose_exp(self);
      if (gain < 0)
         log("Error ? Gain experience on death < 0" + itoa(gain));
         // Bug? xxx I saw level 2 char raise a level because he died .... ?
   }
   gain_exp(self, -gain); 
   raw_kill();
   quit;
}
dilend



dilbegin death_cry();
var
	dir:integer;

code
{
   heartbeat:=PULSE_SEC*3;
   act("<div class='death'>Your blood freezes as you hear $1n's death cry.</div>", A_SOMEONE, self,null,null,TO_REST);

   dir:=0;
   while (dir <= MAX_EXIT)
	{
      if (self.outside.exit_to[dir])
         act("<div class='death'>Your blood freezes as you hear someones death cry from a distance.",
            A_ALWAYS,self.outside.exit_to[dir].inside,null,null,TO_ALL);
      dir:=dir+1;
	}

   return;
}
dilend



dilbegin report_corpse();
var
	act_str:string;
	empty:string;
   symb: string;

code
{
   heartbeat:=PULSE_SEC;
   pause; // IMPORTANT. OTHERWISE THE VALUES WONT GET SET because the code will run on load()
   pause;

   if (self.value[2]!=1)
      quit;

   :start:
   symb := "";
   wait(SFB_MSG,TRUE);

   if ((argument!="report") and (argument!="reportgod"))
      goto start;

   // log("report corpse");
   if ((argument =="report") and (self.value[3]>20))
      goto start;

   if (self.outside.type==UNIT_ST_PC)
      act_str:=self.outside.name;
   else
      act_str:=self.outside.title;

   if (self.inside==null)
      empty:="[Empty]";
   else
      empty:="[Not Empty]";

   if ((argument=="reportgod") and (self.outside.type==UNIT_ST_ROOM))
      symb := "("+self.outside.nameidx+"@"+self.outside.zoneidx+") ";

   if (self.flags & UNIT_FL_BURIED)
      symb := symb + "[Buried] ";

   sendtext (self.name+" in "+act_str+" "+symb+empty+"<br/>", activator);
   goto start;
}
dilend



%objects

                                     head
names {"head"}
title "a bloody head"
descr "The decapitated head of is here"
type ITEM_TRASH
manipulate {MANIPULATE_TAKE}
weight 1
end


                                     rewardhead
names {"head"}
title "a bloody reward test head"
descr "The decapitated head of CrashTestDummy is here"
type ITEM_TRASH
manipulate {MANIPULATE_TAKE}
weight 1
extra {"$reward", "2500", "1024", "$udgaard"}
"This is a fake head to test rewards."
end


                                     corpse
names {"corpse of $1n", "corpse"}
title "$1n's corpse"
descr "The corpse of $1n is lying here."
type ITEM_CONTAINER
manipulate {MANIPULATE_TAKE}
extra {"$rot", 
       "The smelly corpse of $1n is lying here.",
       "The rotting corpse of $1n is lying here.",
       "The decaying corpse of $1n is lying here." } ""
extra {"$rotact",
       "$1n starts smelling.",
       "$1n begins to rot.",
       "You notice maggots crawling around on $1n.",
       "A quivering horde of maggots consume $1n"} ""
dilcopy rot_corpse();
dilcopy report_corpse();
dilcopy bob_code();
end

                                     corpse_statue
names {"statue of $1n", "statue"}
title "$1n's statue"
descr "The statue of $1n is standing here."
type ITEM_OTHER
// manipulate {MANIPULATE_TAKE}
extra {}
   "It is a remarkably life-like statue as if someone and everything they carried was turned to stone."
extra {"$rot", 
       "The cracked statue of $1n is standing here.",
       "The decaying statue of $1n is standing here.",
       "The broken statue of $1n standing here." } ""
extra {"$rotact",
       "Little pieces of stone fall from $1n.",
       "$1n begins to crack.",
       "$1n begins to break and deteriorate.",
       "$1n shatters into a million pieces"} ""
dilcopy rot_corpse();
dilcopy report_corpse();
dilcopy bob_code();
dilbegin disspell();
var
   sl : stringlist;
   pwr : integer;
code
{
:start:
   wait(SFB_MSG, left(argument, 10) == "spl_dispel");
   sl := split(argument, " ");
   pwr := atoi(sl.[1]);

   if (pwr < 0)
   {
      act("The surface of $1n momentarily changes color.", A_HIDEINV, self, null, null, TO_ALL);
   }
   else
   {
      if (self.inside)
         act("$1n changes color and its equipment is unmerged from the stone.", A_HIDEINV, self, null, null, TO_ALL);
      else
         act("$1n changes color.", A_HIDEINV, self, null, null, TO_ALL);
      self.objecttype := ITEM_CONTAINER;
      quit;
   }

   goto start;
}
dilend
end

%end

