#!/bin/bash
# Bashism: Job control

. ../testVars

PROG="../../coLunacyDNS"

cat > upstream.lua << EOF
bindIp = "127.7.7.24" 
function processQuery(Q) -- Called for every DNS query received
  if Q.coQtype == 28 then
    return {co1Type = "ip6",co1Data="2001:db8::707"}
  elseif Q.coQtype == 1 then
    return {co1Type = "A", co1Data = "10.1.1.1"}
  else
    return {co1Type = "notThere"}
  end
end
EOF
cat > test.lua << EOF
bindIp = "127.7.7.25" 
-- Open up block list to know which domains to block
function readFile()
  line = coDNS.read1()
  while line do
    coDNS.log("Read line: " .. line)
    local name, seen = string.gsub(line,'^ip4%["([^"]+)".*$','%1')
    if seen > 0 then
      blockList[name] = "X"
    end
    line = coDNS.read1()
  end
  coDNS.log("End of file")
end

blockList = {}
if coDNS.open1("file1") then readFile() end
if coDNS.open1("file2") then readFile() end
coDNS.open1("file1")
coDNS.close1("file1")
coDNS.open1("file2")
if coDNS.open1(".file3") then readFile() end -- Should fail
if coDNS.open1("/etc/passwd") then readFile() end -- Should fail
if coDNS.open1("does_not_exist") then readFile() end -- Should fail
if not coDNS.read1() then coDNS.log("No file read") end 
if coDNS.open1("file4") then readFile() end
coDNS.close1()
coDNS.open1("file1")

function processQuery(Q) -- Called for every DNS query received
  local upstream = "127.7.7.24"
  local t
  -- Log query
  coDNS.log("Got query for " .. Q.coQuery .. " from " ..
            Q.coFromIP .. " type " ..  Q.coFromIPtype)

  -- Process blocklist
  if blockList[Q.coQuery] == "X" then
    coDNS.log("Name is on block list.")
    return {co1Type = "notThere"}
  end

  if Q.coQtype ~= 1 and Q.coQtype ~= 28 then -- If not IPv4 or IPv6 IP query
    return {co1Type = "notThere"} -- Send "not there" (like NXDOMAIN)
  end

  -- Look for the answer upstream
  if Q.coQtype == 1 then
    t = coDNS.solve({name=Q.coQuery, type="A", upstreamIp4=upstream})
  else
    t = coDNS.solve({name=Q.coQuery, type="ip6", upstreamIp4=upstream})
  end
  -- Handle errors; it is not possible to call coDNS.solve() again
  -- in an invocation of processQuery if t.error is set.
  if t.error then
    coDNS.log(t.error)
    return {co1Type = "serverFail"}
  end

  -- If we got an answer we can use, send it to them
  if t.status > 0 and t.answer then
    if t.status == 1 then
      return {co1Type = "A", co1Data = t.answer} 
    elseif t.status == 28 then
      return {co1Type = "ip6", co1Data = t.answer}
    else -- Send notThere for unknown query type
      return {co1Type = "notThere"}
    end
  end
  coDNS.log("Unknown issue (or record not found)")
  return {co1Type = "notThere"}
end
EOF
cat > file1 << EOF
ip4["phish.example.com."] = "X"
EOF
cat > file2 << EOF
ip4["bad.invalid."] = "X"
EOF
cat > .file3 << EOF
ip4["good.invalid."] = "X"
EOF
cat > file4 << EOF
ip4["four.invalid."] = "X"
EOF

${PROG} -d test.lua | egrep '[A-Za-z0-9]' | grep -v version > output.test1 &
${PROG} -d upstream.lua &
sleep 1

askmara Amaradns.samiam.org. 127.7.7.25 > output.test2
askmara Aphish.example.com. 127.7.7.25 >> output.test2
askmara Agood.invalid. 127.7.7.25 >> output.test2
askmara Abad.invalid. 127.7.7.25 >> output.test2
askmara Afour.invalid. 127.7.7.25 >> output.test2

LIST=$( ps auxw | awk "$PROCGET" | grep "$PROG" | awk '{print $1}' )
for process in $LIST ; do
	kill -ALRM $process
done
sleep 1

if ! cmp output.success1 output.test1 > /dev/null 2>&1 ; then
        echo File Test failed: Server output 
        exit 255
fi
if ! cmp output.success2 output.test2 > /dev/null 2>&1 ; then
        echo File Test failed: Client output 
        exit 255
fi

echo File test Success
# Clean up
rm test.lua
rm upstream.lua
rm file1 file2 .file3 file4
rm output.test1 output.test2
