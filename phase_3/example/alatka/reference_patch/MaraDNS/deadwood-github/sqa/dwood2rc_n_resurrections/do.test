#!/bin/sh

# Lets make sure resurrections work in Deadwood

killall maradns > /dev/null 2>&1 # Don't run this test on Solaris
sleep 2

cat > mararc << EOF
chroot_dir="$( pwd )"
ipv4_bind_addresses="127.0.0.2"
csv2 = {}
csv2["example.com."] = "db.example.com"
EOF

cat > db.example.com << EOF
*.% +10 A 10.1.2.3
EOF


# Now, make sure Deadwood works

for VALUE in 0 1 ; do

echo resurrections=${VALUE}

# Run the authoritative upstream server
../../../server/maradns -f mararc > /dev/null 2>&1 &
#../../../server/maradns -f mararc &
sleep 1

cat > dwood2rc << EOF
chroot_dir="$( pwd )"
ipv4_bind_addresses="127.0.0.1"
upstream_servers = {}
upstream_servers["."]="127.0.0.2"
recursive_acl="127.0.0.1/16"
cache_file="cache/dw_cache"
resurrections=${VALUE}
filter_rfc1918 = 0
maradns_uid = 65534
maradns_gid = 65534
EOF

mkdir cache
chown nobody cache # Ported to run on Ubuntu 20.04 LTS
../../src/Deadwood -f dwood2rc > /dev/null &
#../../src/Deadwood -f dwood2rc &
sleep 1
echo upstream server live
askmara Awww1.example.com. 127.0.0.1 
echo
sleep 1
killall maradns
killall Deadwood

# Now, test resurrections when the upstream server doesn't reply
sleep 70 # Deadwood min TTL: 60 seconds

../../src/Deadwood -f dwood2rc > /dev/null &
#../../src/Deadwood -f dwood2rc &
sleep 1
echo upstream server dead
askmara Awww1.example.com. 127.0.0.1 
echo

killall Deadwood

# OK, test resurrections when the upstream server is there, but drops
# packets

sleep 70 # Deadwood min TTL: 60 seconds

cc -o dead.server dead.server.c
./dead.server > /dev/null &
sleep 1
../../src/Deadwood -f dwood2rc > /dev/null &
#../../src/Deadwood -f dwood2rc &
sleep 1
echo upstream server live but drops packets
askmara Awww1.example.com. 127.0.0.1 
echo

killall Deadwood
killall dead.server
sleep 1
rm dead.server
rm dwood2rc
rm -fr cache

done

rm mararc
rm db.example.com
