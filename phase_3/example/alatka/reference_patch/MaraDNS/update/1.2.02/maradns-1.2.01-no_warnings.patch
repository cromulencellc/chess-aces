This modifies various files so that they compile without generating any
warnings with the new makefiles that use -Wall in every single subdirectory.

diff -ur maradns-1.2.01/rng/make_32bit_tables.c maradns-1.2.02/rng/make_32bit_tables.c
--- maradns-1.2.01/rng/make_32bit_tables.c	2005-12-04 23:12:20.000000000 -0800
+++ maradns-1.2.02/rng/make_32bit_tables.c	2005-12-30 17:40:44.000000000 -0800
@@ -115,7 +115,7 @@
      printf("\n};\n");
      }
 
-main() {
+int main() {
     int a[4] = {19,77,6,16};
     printf("/* This file is automatically generated by the program ");
     printf("make_32bit_tables.c */\n\n");
diff -ur maradns-1.2.01/tcp/libtcp.c maradns-1.2.02/tcp/libtcp.c
--- maradns-1.2.01/tcp/libtcp.c	2005-10-20 01:51:34.000000000 -0700
+++ maradns-1.2.02/tcp/libtcp.c	2005-12-30 17:47:33.000000000 -0800
@@ -19,6 +19,9 @@
 #include "../MaraDns.h"
 #include "../server/read_kvars.h"
 
+/* This is added so we get no warnings when compiled with -Wall */
+extern int make_ip_acl(js_string *in, ipv4pair *out, int max, int depth);
+
 /* Stuff needed so that tcp stuff compiles w/o MaraDNS.c */
 
 int log_level = 1;
diff -ur maradns-1.2.01/tools/askmara-tcp.c maradns-1.2.02/tools/askmara-tcp.c
--- maradns-1.2.01/tools/askmara-tcp.c	2005-12-04 23:41:43.000000000 -0800
+++ maradns-1.2.02/tools/askmara-tcp.c	2005-12-30 17:37:13.000000000 -0800
@@ -41,6 +41,10 @@
 #include "../rng/rng-api-fst.h"
 /* END RNG USING CODE */
 
+#include "../libs/MaraHash.h"
+#include "../dns/functions_dns.h"
+#include "../parse/functions_parse.h"
+
 int verbose_mode = 0; /* Whether to have short or verbose output; 
                          1: verbose output; any other value: short output */
 int timeout = 21;
@@ -48,6 +52,12 @@
 /* So -Wall doesn't gag */
 extern int decomp_init();
 
+/* Defining finctions which are part of askmara-tcp.c */
+int verbose_output(js_string *uindata);
+int csv1_compatible_output(js_string *uindata, js_string *query);
+int out_answer(js_string *uindata,int *place);
+int csv1_answer(js_string *uindata, int *place, js_string *query);
+
 /* Octal escape any non-ASCII sequences in the askmara output; almost idential
    to show_esc_stdout */
 int escape_stdout(js_string *js) {
@@ -80,11 +90,10 @@
     /* BEGIN RNG USING CODE */
     /* May as well bring out the bug guns (e.g. our secure RNG) */
     BYTE r_inBlock[17],r_outBlock[17],r_binKey[17];
-    BYTE r_keyMaterial[320];
     keyInstance r_keyInst;
     cipherInstance r_cipherInst;
     unsigned char crypto_key[34];
-    int desc, len, counter;
+    int counter;
     char *mc1, *mc2;
     /* END RNG USING CODE */
     int ret = 4321;
@@ -141,21 +150,16 @@
     exit(1);
     }
 
-main(int argc, char **argv) {
+int main(int argc, char **argv) {
     char *server_address = NULL;
     struct sockaddr_in server;
     int len_inet; /* Length */
     int s; /* Socket */
-    int q; /* Used for binding, etc */
     js_string *outdata; /* Outgoing data */
     js_string *indata, *uindata; /* Incoming data (uncompressed version) */
     q_header header; /* header data */
     q_question question;
-    int counter,place,count;
-    fd_set rx_set; /* Using select() because if its timeout option */
-    int maxd;      /* select() */
-    struct timeval tv;  /* select() */
-    int n; /* Select() return value */
+    int place,count;
     int nrd = 0; /* whether recursion is desired or not 1: No recursion;
                    0: recursion desired */
     int id;
@@ -317,6 +321,7 @@
     else
         csv1_compatible_output(uindata,question.qname);
 
+    return 0;
     }
 
 /* Verbose form of askmara output
@@ -468,7 +473,7 @@
                    L_DOT,*(uindata->string + *place + 2),
                    L_DOT,*(uindata->string + *place + 3),L_NEWLINE,L_NEWLINE);
             }
-        else if(rr_hdr.type = RR_TXT) {
+        else if(rr_hdr.type == RR_TXT) {
             printf("%s",L_TXT); /* Text String */
             read_txt(uindata,mx.exchange,*place);
             escape_stdout(mx.exchange);
@@ -479,6 +484,8 @@
 
         *place += rr_hdr.rdlength; /* To do: read the RD data itself for
                                       all MaraDNS supported RRs */
+        
+	return 0;
         }
 
 /* csv1-compatible form of askmara output
@@ -598,15 +605,15 @@
             harderror(L_READSOA);
         hname_translate(soa.mname,RR_SOA);
         hname_translate(soa.rname,RR_MX);
-        printf("|",L_S_MNAME); /* SOA mname */
+        printf("|"); /* SOA mname */
         escape_stdout(soa.mname);
-        printf("|",L_NEWLINE,L_S_RNAME); /* SOA rname */
+        printf("|"); /* SOA rname */
         escape_stdout(soa.rname);
-        printf("|%u",soa.serial,L_NEWLINE);
-        printf("|%d",soa.refresh,L_NEWLINE);
-        printf("|%d",soa.retry,L_NEWLINE);
-        printf("|%d",soa.expire,L_NEWLINE);
-        printf("|%u\n",soa.minimum,L_NEWLINE);
+        printf("|%u",soa.serial);
+        printf("|%d",soa.refresh);
+        printf("|%d",soa.retry);
+        printf("|%d",soa.expire);
+        printf("|%u\n",soa.minimum);
         }
     else if(rr_hdr.type == RR_MX) {
         if(uindata->unit_count < *place + 2)
@@ -614,7 +621,7 @@
         mx.preference = ((*(uindata->string + *place) & 0xff) << 8) |
                          (*(uindata->string + *place + 1) & 0xff);
         read_ns(uindata,mx.exchange,*place + 2);
-        printf("|%d",mx.preference,L_NEWLINE); /* MX pref. */
+        printf("|%d",mx.preference); /* MX pref. */
         hname_translate(mx.exchange,-2); /* Makes the char a pipe */
         escape_stdout(mx.exchange);
         printf("\n");
@@ -635,7 +642,7 @@
                L_DOT,*(uindata->string + *place + 2),
                L_DOT,*(uindata->string + *place + 3));
         }
-    else if(rr_hdr.type = RR_TXT) {
+    else if(rr_hdr.type == RR_TXT) {
         printf("|"); 
         read_txt(uindata,mx.exchange,*place);
         escape_stdout(mx.exchange);
@@ -647,5 +654,7 @@
 
     *place += rr_hdr.rdlength; /* To do: read the RD data itself for
                                   all MaraDNS supported RRs */
+
+    return 0;
     }
 
diff -ur maradns-1.2.01/tools/askmara.c maradns-1.2.02/tools/askmara.c
--- maradns-1.2.01/tools/askmara.c	2005-12-05 13:19:37.000000000 -0800
+++ maradns-1.2.02/tools/askmara.c	2005-12-30 17:47:45.000000000 -0800
@@ -53,7 +53,9 @@
 int csv2_compatible_output(js_string *uindata, js_string *query);
 int out_answer(js_string *uindata,int *place);
 int csv2_answer(js_string *uindata, int *place, js_string *query);
-
+/* escape_stdout_csv2: From parse/Csv2_esc_txt.c and defined in
+   parse/Csv2_functions.h */
+extern int escape_stdout_csv2(js_string *js);
 
 int verbose_mode = 0; /* Whether to have short or verbose output; 
                          1: verbose output; any other value: short output */
diff -ur maradns-1.2.01/tools/benchmark.c maradns-1.2.02/tools/benchmark.c
--- maradns-1.2.01/tools/benchmark.c	2005-12-04 23:46:59.000000000 -0800
+++ maradns-1.2.02/tools/benchmark.c	2005-12-30 17:43:11.000000000 -0800
@@ -36,6 +36,9 @@
 /* All of the labels */
 #include "askmara_labels_en.h"
 
+#include "../dns/functions_dns.h"
+
+
 int querynum;
 
 int harderror(char *msg) {
@@ -48,17 +51,16 @@
     exit(1);
     }
 
-main(int argc, char **argv) {
+int main(int argc, char **argv) {
     char *server_address = NULL;
-    struct sockaddr_in dns_udp, server;
+    struct sockaddr_in dns_udp;
     int len_inet; /* Length */
     int s; /* Socket */
-    int q; /* Used for binding, etc */
     js_string *outdata; /* Outgoing data */
     js_string *indata, *uindata; /* Incoming data (uncompressed version) */
     q_header header; /* header data */
     q_question question;
-    int counter,place,count;
+    int place,count;
 
     /* Determine what the query string is */
     if(argc < 2 || argc > 3)
@@ -146,5 +148,6 @@
         printf("%d queries performed\n",querynum);
 
     }
+   return 0;
    }
 
diff -ur maradns-1.2.01/tools/duende.c maradns-1.2.02/tools/duende.c
--- maradns-1.2.01/tools/duende.c	2005-12-04 23:46:35.000000000 -0800
+++ maradns-1.2.02/tools/duende.c	2005-12-30 17:42:30.000000000 -0800
@@ -61,7 +61,6 @@
    
 void log_helper(char *name,int stdout_fd) {
     char out_buf[1024]; 
-    int time_to_die = 0;
 
     /* We can't use our signal handlers because fgets is blocking */
     signal(SIGTERM,SIG_DFL);
diff -ur maradns-1.2.01/tools/strip.control.c maradns-1.2.02/tools/strip.control.c
--- maradns-1.2.01/tools/strip.control.c	2003-01-11 22:54:53.000000000 -0800
+++ maradns-1.2.02/tools/strip.control.c	2005-12-30 17:41:18.000000000 -0800
@@ -1,4 +1,4 @@
-/* Copyright (c) 2002,2003 Sam Trenholme
+/* Copyright (c) 2002-2005 Sam Trenholme
  *
  * TERMS
  *
@@ -20,7 +20,7 @@
 
 #include <stdio.h>
 
-main() {
+int main() {
         unsigned char a;
         while(!feof(stdin)) {
                 a = getc(stdin);
@@ -32,6 +32,7 @@
                         printf("%c",a);
 
                 }
+	return 0;
         }
 
 
