diff -ur maradns-1.2.07.2/tools/misc/mqhash.c maradns-1.2.07.3/tools/misc/mqhash.c
--- maradns-1.2.07.2/tools/misc/mqhash.c	2005-06-20 16:32:57.000000000 -0700
+++ maradns-1.2.07.3/tools/misc/mqhash.c	2006-05-05 12:33:34.000000000 -0700
@@ -1,4 +1,4 @@
-/* Copyright (c) 2002-2005 Sam Trenholme
+/* Copyright (c) 2002-2006 Sam Trenholme
  *
  * TERMS
  *
@@ -38,7 +38,7 @@
 */
 
 int hash_compress(char *input, char *state) {
-    BYTE r_inBlock[HASH_BYTES + 1], r_outBlock[HASH_BYTES + 1],
+    MARA_BYTE r_inBlock[HASH_BYTES + 1], r_outBlock[HASH_BYTES + 1],
          r_binKey[HASH_BYTES + 1];
     keyInstance r_keyInst;
     cipherInstance r_cipherInst;
@@ -101,17 +101,18 @@
     int readed, counter;
     FILE *sh;
     char copy[HASH_BYTES * 43];
+    int n = 0;
 
     unsigned int len = 0;
 
     /* Check the command line argument */
-    if(argc < 2 || argc > 3) {
+    if(argc != 3 && argc != 5) {
         if(argc >= 1) {
-            printf("Usage: %s [-s] {data to hash}\n",argv[0]);
+            printf("Usage: %s [-n #] [-s] [-u] {data to hash}\n",argv[0]);
 	    exit(1);
 	    }
         else {
-	    printf("Usage: <this program> [-s] {data to hash}\n");
+	    printf("Usage: <this program> [-n #] [-s] [-u] {data to hash}\n");
 	    exit(2);
 	    }
         }
@@ -121,9 +122,22 @@
         state[counter] = 0xff;
 	}
 
+    if(argc == 5 && (*(argv[1]) != '-' || *(argv[1] + 1) != 'n')) {
+	    printf("Usage: <this program> [-n #] [-s] [-u] {data to hash}\n");
+	    exit(3);
+	    }
+    else if(argc == 5) {
+            n = atoi(argv[2]);
+            if(n < 1 || n > 9) {
+                printf("n must be between 1 and 9\n");
+                exit(4);
+                }
+            } 
     /* Open up what we prepend to the hash if -s is in argv */ 
-    if(argc == 3) {
+    if((argc == 3 && *(argv[1]) == '-' && *(argv[1] + 1) == 's') ||
+       (argc == 5 && *(argv[3]) == '-' && *(argv[3] + 1) == 's')) {
 	    char fp[100];
+            int zork;
 
 	    if(strncpy(fp,getenv("HOME"),50) == NULL) {
 		    perror("Problem copying string");
@@ -134,8 +148,8 @@
 		    exit(36);
 	    }
     	    if((sh = fopen(fp,"rb")) == NULL) {
-            	perror("Could not open file");
-	    	exit(3);
+            	perror("Could not open file ~/.mhash_prefix");
+	    	exit(5);
 		}
 	    /* Get only one line from this file: A string we put at
 	     * the beginning of the hash we will make */
@@ -146,25 +160,47 @@
 	    fclose(sh);
 	    counter = strnlen(copy,85);
 	    counter--;
-	    copy[counter] = 0;
+            /* Remove :, which is a metacharacter */
+            for(zork = 0; zork <= counter; zork++) {
+                if(copy[zork] == ':') {
+                    copy[zork] = '@'; 
+                    }
+                }
+            copy[counter] = ':';
+            counter++;
 	    }
-    else {
+    else if((argc == 3 && *(argv[1]) == '-' && *(argv[1] + 1) == 'u') ||
+       (argc == 5 && *(argv[3]) == '-' && *(argv[3] + 1) == 'u')) {
        counter = 0;
        }
+    else {
+       printf("Usage: <this program> [-n #] [-s] [-u] {data to hash}\n");
+       exit(6);
+       }
    
-    if(strnlen(argv[1],HASH_BYTES * 35) >= HASH_BYTES * 31) {
+    if(strnlen(argv[argc - 1],HASH_BYTES * 35) >= HASH_BYTES * 31) {
          printf("Hash input is too long!\n");
 	 }
+
+    if(n >= 1 && n <= 9) {
+        copy[counter] = '0' + n;
+        counter++;
+        copy[counter] = ':';
+        counter++;
+        }
     readed = counter;
     for(;counter < HASH_BYTES * 42; counter++) 
         copy[counter] = 0;
     counter = readed;
     for(;counter < HASH_BYTES * 41; counter++) {
+        /* The ':' is always a metacharacter */
+        if(argv[argc - 1][counter - readed] == ':')
+            argv[argc - 1][counter - readed] = '@';
 	if(argv[argc - 1][counter - readed] == '\0')
 	    break;
 	copy[counter] = argv[argc - 1][counter - readed];
         }
-	  
+
     /* Initialize the state */
     for(counter = 0; counter < HASH_BYTES; counter++) {
         state[counter] = 0xff;
@@ -236,16 +272,10 @@
     hash_compress(input,state);
     hash_compress(state,state);
 
-    if(argc != 3) {
-	 printf("The following is the marahash for this string:\n");
-    }
     for(counter = 0; counter < HASH_BYTES; counter++) {
         printf("%02x",state[counter] & 0xff);
 	if(counter % 4 == 3) {printf(" ");}
         }
-    if(argc != 3) {
-        printf(" %s",copy);
-        }
     printf("\n");
     }
 
diff -ur maradns-1.2.07.2/tools/misc/rnghash.c maradns-1.2.07.3/tools/misc/rnghash.c
--- maradns-1.2.07.2/tools/misc/rnghash.c	2003-01-11 22:54:44.000000000 -0800
+++ maradns-1.2.07.3/tools/misc/rnghash.c	2006-05-05 11:58:15.000000000 -0700
@@ -1,4 +1,4 @@
-/* Copyright (c) 2002,2003 Sam Trenholme
+/* Copyright (c) 2002-2006 Sam Trenholme
  *
  * TERMS
  *
@@ -88,7 +88,7 @@
 */
 
 int hash_compress(char *input, char *state) {
-    BYTE r_inBlock[HASH_BYTES + 1], r_outBlock[HASH_BYTES + 1],
+    MARA_BYTE r_inBlock[HASH_BYTES + 1], r_outBlock[HASH_BYTES + 1],
          r_binKey[HASH_BYTES + 1];
     keyInstance r_keyInst;
     cipherInstance r_cipherInst;
