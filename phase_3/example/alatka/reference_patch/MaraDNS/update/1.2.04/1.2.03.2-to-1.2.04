#!/bin/bash -e

# This script updates MaraDNS 1.2

# To run this script, make sure that this script is in the directory
# containing the tarball for the version of MaraDNS you wish to update, and
# all of the patches are in a directory entitled 'patches'.

# For example, to update MaraDNS 1.2.02 to 1.2.03, make sure 
# maradns-1.2.02.tar.lzma is in the same directory as this script, and
# that the directory containing this script has a directory called
# "patches/" which has all of the maradns-1.2.02*.patch files.

# You will need to have lzma on your system to run this script

# Get the current and next version number

CURRENT=${0%%-*}
CURRENT=${CURRENT##*/}
NEXT=${0##*-}

# Make a clean CURRENT install, which we rename NEXT
rm -fr maradns-$CURRENT 2> /dev/null
rm -fr maradns-$NEXT 2> /dev/null
echo extracting tarball
cat maradns-$CURRENT.tar.lzma | lzma d -si -so | tar xf -
if [ $? != 0 ] ; then
	echo run this from the correct directory
	exit 1
fi
rm -fr maradns-$NEXT*
mv maradns-$CURRENT maradns-$NEXT
cd maradns-$NEXT

# The patches

mkdir update/$NEXT
cp ../patches/maradns-$CURRENT* update/$NEXT

# This is one of the few places where we will need to change anything
# in this script from version to version

echo applying patches

# Patch #1: Update the default mararc file included with the MaraDNS
# RPM
patch -p1 < update/$NEXT/maradns-1.2.03.2-rpm.mararc.patch

# Patch #2: Update the RPM spec file
patch -p1 < update/$NEXT/maradns-1.2.03.2-rpm_spec.patch

# Patch #3: Greg Swallow's contributions to the RPM spec file
patch -p1 < update/$NEXT/maradns-1.2.03.2-rpm_spec_2.patch

# Patch #4: Update the FAQ to tell people to upgrade from 1.2.03.1 if
# seeing freeze-ups
patch -p1 < update/$NEXT/maradns-1.2.03.2-faq.patch

# Patch #5: Typo in recursive.c found by someone using MaraDNS for a 
#           large ISP
patch -p1 < update/$NEXT/maradns-1.2.03.2-recursive_timeout_typo.patch

# Patch #6: Another typo in recursive.c found by someone using MaraDNS for a 
#           large ISP
patch -p1 < update/$NEXT/maradns-1.2.03.2-recursive_timeout_typo_2.patch

# Patch #7: Make the minimum TTL that the client can see be the value of
#           min_ttl / min_ttl_cname as set in the mararc file (this 
#           patch doesn't do anything; have a min_visible_ttl mararc
#           variable instead)
patch -p1 < update/$NEXT/maradns-1.2.03.2-recursive_min_ttl.patch

# Patch #8: Have the custodian run for less time more frequently.  This
#           increases performance when used on a highly loaded DNS server
patch -p1 < update/$NEXT/maradns-1.2.03.2-recursive_high_load.patch

# Patch #9: Disable some now-unneeded code
patch -p1 < update/$NEXT/maradns-1.2.03.2-recursive_disable_30_minttl.patch

# Patch #10: Get MaraDNS to work on Cygwin (we can't do setuid() or an
# effect chroot() here, alas)
patch -p1 < update/$NEXT/maradns-1.2.03.2-cygwin.patch

# Patch #11: Add new mararc variable: min_visible_ttl (document this also)
patch -p1 < update/$NEXT/maradns-1.2.03.2-min_visible_ttl.patch

# Patch #12: Allow MaraDNS to have a maxprocs as high as 5000 (a highly loaded
# isp is happily using MaraDNS with a maxprocs of 2500)
patch -p1 < update/$NEXT/maradns-1.2.03.2-maxprocs.patch

mv build/maradns-1.2.00.spec build/maradns-$NEXT.spec

# Patch: Update changelog (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-changelog.patch

# Other release-specific fixes and changes go here

# Anything below this line normally is not changed between MaraDNS versions
echo updating documentation

# Update the documentation
cd doc/en
make
cd man
make
# The following is time-consuming, so we only do it when making the final
# tarballs
if [[ "$1" == "go" || "$1" == "snap" ]] ; then
	echo making PDF reference
	./make.pdf
	echo done
fi
cd ../tutorial
make
cd ../text
make
# Go back to the maradns dir
cd ../../..

rm CHANGELOG
ln -s doc/en/changelog.txt CHANGELOG

# Go one level higher than the toplevel directory to copy this script
# over
cd ..

# Put this script in the "build" directory
cp $0 maradns-$NEXT/update/$NEXT

if [[ "$1" != "go" && "$1" != "snap" ]] ; then
	echo OK, maradns-$NEXT built.  Confirm this compiles and	
	echo perform basic regression before re-running this to make
	echo the tarballs.  Once you have tested this, rerun this 
	echo script as: $0 go
	exit 0
fi

# Build the tarballs
echo making new tarballs

if [ "$1" == "snap" ] ; then
	SNAP=snap-$( date +%Y%m%d )
else
	SNAP=$NEXT
fi

tar cjf maradns-$SNAP.tar.bz2 maradns-$NEXT
tar czf maradns-$SNAP.tar.gz maradns-$NEXT

echo using exotic compression
tar cf maradns-$SNAP.tar maradns-$NEXT

# All of the compression we actually use was originally written by 
# Igor Pavlov for the 7-zip compression suite
echo shrinking .gz tarball
advdef -z -3 maradns-$SNAP.tar.gz

echo lzma compression \(this will take about 5 minutes\)
date
# To decompress: cat file.tar.lzma | lzma d -si -so | tar xvf -
# -d20 makes the file almost as small as -d22, but uses 1/4 of the memory
# (only a little over one meg needed for decompression)
lzma e maradns-$SNAP.tar maradns-$SNAP.tar.lzma -a2 -d20 -fb255
date
echo

exit 0

# The other exotic compressors can't be run in a pipeline

echo 7zip compression
date
7za a maradns-$SNAP.tar.7z maradns-$SNAP.tar
date
echo

echo paq6 compression \(This will take 2\-3 minutes\)
date
paq6v2 -2 maradns-$SNAP.tar.pq6 maradns-$SNAP.tar
date
echo

echo rzip compression
date
rzip maradns-$SNAP.tar
date
echo
