--- deadwood-2.9.02/src/DwSocket.h.orig	2010-07-29 09:54:54.000000000 -0700
+++ deadwood-2.9.02/src/DwSocket.h	2010-07-29 09:55:12.000000000 -0700
@@ -156,7 +156,7 @@
         dw_str *query;
         uint8_t recurse_depth;
 	int8_t current_ns;
-        int parent_id;
+        int child_id;
         dw_str *glueless;
         uint16_t num_locals; /* Number of local connections to send replies
                               * to once we get an answer from upstream */
@@ -248,7 +248,7 @@
                         rem[a].query = 0; } \
                      rem[a].recurse_depth = 0; \
                      rem[a].current_ns = -1; \
-                     rem[a].parent_id = -1; \
+                     rem[a].child_id = -1; \
                      if(rem[a].glueless != 0) { \
                         dw_destroy(rem[a].glueless); \
                         rem[a].glueless = 0; } \
--- deadwood-2.9.02/src/DwUdpSocket.c.orig	2010-07-29 09:57:25.000000000 -0700
+++ deadwood-2.9.02/src/DwUdpSocket.c	2010-07-29 09:58:31.000000000 -0700
@@ -879,7 +879,9 @@
         if (rem[b].local[l]->glueless_type != 0) {
 		conn_num = rem[b].local[l]->glueless_conn;	
 		if(rem[b].local[l]->glueless_type == 1) { /* Glueless NS */
-			dwx_glueless_done(query, conn_num);
+			if(rem[conn_num].child_id == b) {
+				dwx_glueless_done(query, conn_num);
+			}
                 	ret = 4; /* Yes, we want to end the connection */
 		} else if(rem[b].local[l]->glueless_type == 2) { /* CNAME */
 			dwx_incomplete_cname_done(query, b, l);
--- deadwood-2.9.02/src/DwRecurse.c.orig	2010-07-29 09:54:41.000000000 -0700
+++ deadwood-2.9.02/src/DwRecurse.c	2010-07-29 10:02:17.000000000 -0700
@@ -2668,6 +2668,7 @@
 	make_remote_connection(new_conn_num,(unsigned char *)packet->str,
 			packet->len,rem[new_conn_num].query,INVALID_SOCKET);
 	rem[conn_number].die = get_time() + ((int64_t)timeout_seconds << 10);
+	rem[conn_number].child_id = new_conn_num;
 	/* Set new connection parameters */
 	rem[new_conn_num].die = get_time() + ((int64_t)timeout_seconds << 8);
 	rem[new_conn_num].num_locals = 1;
@@ -2710,6 +2711,7 @@
 	/* Disabled because this code has not been tested */
 	/*
         already = dwx_find_inflight(addr.glueless);
+	rem[conn_number].child_id = already;
         if(already != -1) {
                 if(dwx_do_glueless_inflight(conn_number, already, 1)
                                 != -2) {
@@ -2802,6 +2804,7 @@
 	/* Disabled because this code has not been tested */
 	/* 
 	already = dwx_find_inflight(query);
+	rem[conn_number].child_id = already;
 	if(already != -1) {
 		if(dwx_do_glueless_inflight(conn_num, already, 2) != -2) {
 			return 1;
@@ -2829,6 +2832,9 @@
 	}
 	
 	parent = rem[child].local[l]->glueless_conn;
+	if(rem[parent].child_id != child) {
+		goto catch_dwx_incomplete_cname_done;
+	}
 	cname_cache = dw_copy(rem[parent].query);
 	if(cname_cache == 0 || cname_cache->len < 3 || 
 			dw_put_u16(cname_cache, 65394, -3) == -1) {
