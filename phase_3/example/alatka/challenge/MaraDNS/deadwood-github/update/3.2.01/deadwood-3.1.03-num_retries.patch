--- deadwood-3.2.01/src/DwMararc.c.orig	2012-01-25 11:57:24.000000000 -0600
+++ deadwood-3.2.01/src/DwMararc.c	2012-01-25 11:57:34.000000000 -0600
@@ -384,7 +384,7 @@
         key_n[DWM_N_maradns_uid] = 99;
         key_n[DWM_N_maradns_gid] = 99;
         key_n[DWM_N_resurrections] = 1;
-        key_n[DWM_N_num_retries] = 2;
+        key_n[DWM_N_num_retries] = 5;
         key_n[DWM_N_verbose_level] = 3;
         key_n[DWM_N_max_tcp_procs] = 8;
         key_n[DWM_N_timeout_seconds_tcp] = 4;
--- deadwood-3.2.01/src/DwSocket.c.orig	2012-01-25 11:57:53.000000000 -0600
+++ deadwood-3.2.01/src/DwSocket.c	2012-01-25 11:58:46.000000000 -0600
@@ -1,4 +1,4 @@
-/* Copyright (c) 2007-2011 Sam Trenholme
+/* Copyright (c) 2007-2012 Sam Trenholme
  * IPv6 code by Jean-Jacques Sarton
  *
  * TERMS
@@ -71,7 +71,7 @@
 int32_t num_ports = 4096;
 int32_t maradns_uid = 99;
 int32_t maradns_gid = 99;
-int num_retries = 2;
+int num_retries = 5;
 dwd_dict *blacklist_dict = 0;
 
 #ifdef MINGW
@@ -499,7 +499,7 @@
         maradns_uid = get_key_n(DWM_N_maradns_uid,10,65535,99);
         maradns_gid = get_key_n(DWM_N_maradns_gid,10,65535,99);
         resurrections = get_key_n(DWM_N_resurrections,0,1,1);
-        num_retries = get_key_n(DWM_N_num_retries,0,8,2);
+        num_retries = get_key_n(DWM_N_num_retries,0,32,5);
 
         if((num_ports & (num_ports - 1)) != 0) {
                 dw_fatal("num_ports must be a power of 2");
--- deadwood-3.2.01/doc/Deadwood.ej.orig	2012-01-25 11:59:13.000000000 -0600
+++ deadwood-3.2.01/doc/Deadwood.ej	2012-01-25 11:59:36.000000000 -0600
@@ -261,9 +261,9 @@
 <h2>num_retries</h2>  
 The number of times we retry to send a query upstream
 before giving up.  If this is 0, we only try once; if this is 1, 
-we try twice, and so on, up to 8 retries.  Note that each retry 
+we try twice, and so on, up to 32 retries.  Note that each retry 
 takes timeout_seconds seconds before we retry again.  Default
-value: 2
+value: 5
 
 <h2>ns_glueless_type</h2>
 The RR type we send to resolve glueless records.  This should be
