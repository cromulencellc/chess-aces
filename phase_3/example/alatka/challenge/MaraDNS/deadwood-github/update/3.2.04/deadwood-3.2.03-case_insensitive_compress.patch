--- deadwood-3.2.03/src/DwCompress.c	2012-12-20 10:30:37.000000000 -0800
+++ deadwood-3.2.04/src/DwCompress.c	2013-07-13 18:02:22.685055791 -0700
@@ -1,4 +1,4 @@
-/* Copyright (c) 2009-2012 Sam Trenholme
+/* Copyright (c) 2009-2013 Sam Trenholme
  *
  * TERMS
  *
@@ -378,16 +378,22 @@
  * if they are not, and -1 on error
  * Input: String with first label, offset of begining of dlabel in
  *        first string, string and offset for second label
+ * 2013-07-13: Made search case-insensitive
  */
 int dwc_label_same(dw_str *a, int32_t a_o, dw_str *b, int32_t b_o) {
         int c = 0, noloop = 0;
+	uint8_t lc1, lc2;
 
         if(dw_assert_sanity(a) == -1 || dw_assert_sanity(b) == -1 ||
            a_o > a->len || b_o > b->len || a_o < 0 || b_o < 0) {
                 return -1;
         }
 
-        if(*(a->str + a_o) != *(b->str + b_o)) {
+	lc1 = *(a->str + a_o);
+	lc2 = *(b->str + b_o);
+	if(lc1 >= 'A' && lc1 <= 'Z') { lc1 += 32; }	
+	if(lc2 >= 'A' && lc2 <= 'Z') { lc2 += 32; }	
+        if(lc1 != lc2) {
                 return 0;
         }
 
@@ -398,7 +404,11 @@
         }
 
         for(noloop = 0; noloop < 128 && c > 0; noloop++) {
-                if(*(a->str + a_o + c) != *(b->str + b_o + c)) {
+		lc1 = *(a->str + a_o + c);
+		lc2 = *(b->str + b_o + c);
+		if(lc1 >= 'A' && lc1 <= 'Z') { lc1 += 32; }	
+		if(lc2 >= 'A' && lc2 <= 'Z') { lc2 += 32; }	
+                if(lc1 != lc2) {
                         return 0;
                 }
                 c--;
