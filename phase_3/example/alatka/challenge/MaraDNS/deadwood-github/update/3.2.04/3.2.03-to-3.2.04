#!/bin/sh -e

# The revision number; in the case of having multiple snapshots a day,
# the revision number can be incremented so as to minimize confusion
# This is only done when more than one snapshop is uploaded to the
# maradns.org server in a given day.  Here at the top to be easy to change.
REVISION=1

# This script updates Deadwood 3.0

# To run this script, make sure that this script is in the directory
# containing the tarball for the version of Deadwood you wish to update, and
# all of the patches are in a directory entitled 'patches'.

CURRENT=${0%%-*}
CURRENT=${CURRENT##*/}
NEXT=${0##*-}

# Make a clean CURRENT install, which we rename NEXT
rm -fr deadwood-$CURRENT 2> /dev/null
rm -fr deadwood-$NEXT 2> /dev/null
echo extracting tarball
tar xJf deadwood-$CURRENT.tar.xz
if [ $? != 0 ] ; then
	echo run this from the correct directory
	exit 1
fi
rm -fr deadwood-$NEXT*
mv deadwood-$CURRENT deadwood-$NEXT
cd deadwood-$NEXT

# The patches

mkdir update/$NEXT
if [ "$1" != "new" ] ; then
	cp ../patches/deadwood-$CURRENT* update/$NEXT
	#cp ../patches/maradns* update/$NEXT
	#echo
fi

# Regenerate Deadwood's random prime number (always done)
echo Making new random prime
cd src
rm -f *orig # While we're here, remove any pesky .orig files
cc -o foo RandomPrime.c
./foo > DwRandPrime.h
rm foo
cd ..

# This is one of the few places where we will need to change anything
# in this script from version to version

# BEGIN Release-specific fixes and changes go here

echo applying patches

# Patch: Put stat time for dwood3rc file in cache file in backwards compatible
# format (Disabled: This problem is becoming too complicated)
#patch -p1 < update/$NEXT/deadwood-3.2.03-stat_metadata.patch

# Patch: UltraDNS returns WWW.getcafecup.com when asked for www.getcafecup.com
patch -p1 < update/$NEXT/deadwood-3.2.03-www.getcafecup.com.patch

# Patch: Fix long-standing bug which causes whatever.scalzi.com to not resolve
patch -p1 < update/$NEXT/deadwood-3.2.03-whatever.scalzi.com-fix.patch

# Patch: Add FAQ entry about Deadwood dropping RFC1918 addresses from replies
patch -p1 < update/$NEXT/deadwood-3.2.03-faq_rfc1918.patch

# Patch: Add FAQ entry about what causes "uninitialized dictionary
# variable" message
patch -p1 < update/$NEXT/deadwood-3.2.03-faq_dict_variable.patch

# Patch: Limit number of upstream servers to 20,000.  
patch -p1 < update/$NEXT/deadwood-3.2.03-max_upstream_20000.patch

# Patch: Compression should be case insensitive (smaller DNS packets)
patch -p1 < update/$NEXT/deadwood-3.2.03-case_insensitive_compress.patch

# Patch: Expand recursive_acl example to show multiple subnets
patch -p1 < update/$NEXT/deadwood-3.2.03-recursive_acl_example.patch

# Patch: Update copyright for 2013
patch -p1 < update/$NEXT/deadwood-3.2.03-2013.patch

# Patch: Fix warnings when compiled with clang 3.0
patch -p1 < update/$NEXT/deadwood-3.2.03-clang_warnings.patch

# Patch: SQA updates for 3.2.04 (example.com moved; etc.)
patch -p1 < update/$NEXT/deadwood-3.2.03-sqa_updates.patch

# Patch: Add -DRG64 option to use RadioGatún[64] (instead of
# RadioGatún[32])
# DISABLED: This code is not needed.  Even though RG64 *is* faster,
# even on 32-bit systems, it uses more code on 32-bit systems (breaking
# Deadwood's ability to fit in 65,536 bytes on Windows).
# Also: This code does not have a test for it.  RG32 is good enough; if
# I'm going to update Deadwood's crypto, do it right: add SipHash, add Keccak, 
# add maybe another stream cipher.  
#patch -p1 < update/$NEXT/deadwood-3.2.03-rg64.patch

# Patch: d.root-servers.org moved from 128.8.10.90 to 199.7.91.13 
patch -p1 < update/$NEXT/deadwood-3.2.03-root_server_ipchange.patch

# Patch: Cleanup of code in now-case-insensitive dwx_dname_issame()
patch -p1 < update/$NEXT/deadwood-3.2.03-dwx_dname_issame-cleanup.patch

# Patch: Cleanup of code that initializes "dns string" objects; make
# sure initialized values are 0
patch -p1 < update/$NEXT/deadwood-3.2.03-DwDnsStr-init0.patch

# Patch: Fix resolution of oncetv-ipn.net and www.oncetv-ipn.net
# non-trivial patch; we treat a single answer to our question in the AR
# section of the reply (if there is one or more NS replies and the
# AN section is blank) as if it were a single direct answer in the AN 
# section.
# This may have the side effect of speeding up Deadwood in some cases.
patch -p1 < update/$NEXT/deadwood-3.2.03-oncetv-ipn.net.patch

# Patch: update CHANGELOG
patch -p1 < update/$NEXT/deadwood-3.2.03-CHANGELOG.patch

# We're getting .orig files when patching :(
rm -f src/*.orig

# END Release-specific fixes/changes

# This script with the "orig" argument can used if making a release 
# that is making changes to an already-patched version of Deadwood
# Change "orig" to "work" if implementing new features
if [ "$1" = "orig" ] ; then 
	cd src
	for a in *.c *.h ; do
		cp $a $a.orig
	done
	cd ..
	cp doc/Deadwood.ej doc/Deadwood.ej.orig
fi

# Convert tabs in code to spaces, since this is inconsistant in different
# programs; disable when in "work" mode since it messes up patches
if [ "$1" != "work" ] ; then 
	echo removing tabs from source files
	for a in $( find . -type f -name \*.[ch] ) ; do 
		col -x < $a > foo
		if [ $? == 0 ] ; then
			mv foo $a
		fi
	done
fi
chmod 755 src/make.version.h

echo updating documentation
# Update the documentation
cd doc
make
# Go back to the deadwood dir
cd ..

# Go one level higher than the toplevel directory to copy this script
# over
cd ..

# Put this script in the "build" directory
cp $0 deadwood-$NEXT/update/$NEXT

# Version number always current
cd deadwood-$NEXT/src
./make.version.h > version.h
cd ../..

if [ "$1" = "new" ] ; then
	tar xJf deadwood-$CURRENT.tar.xz
	echo OK, both deadwood-$CURRENT and deadwood-$NEXT made\; you
	echo now can start making patches.
	exit 0
fi

if [ "$1" != "go" ] && [ "$1" != "snap" ] && [ "$1" != "work" ] ; then
	echo OK, deadwood-$NEXT built.  Confirm this compiles and	
	echo perform basic regression before re-running this to make
	echo the tarballs.  Once you have tested this, rerun this 
	echo script as: \"$0 go\" or as \"$0 snap\" 
        echo to make a daily snapshot
	exit 0
fi

if [ "$1" = "work" ] ; then
	tar xJf deadwood-$CURRENT.tar.xz
	echo OK, both deadwood-$CURRENT and deadwood-$NEXT made\; you
	echo now can make more patches as needed.  
	cd deadwood-$NEXT/src
	echo '#define VERSION "'$NEXT'-pre"' > version.h
	cd ../..
	exit 0
fi

# Build the tarballs
echo making new tarballs

if [ "$1" = "snap" ] ; then
	SNAP=S-$( date +%Y%m%d )-$REVISION
	rm -fr deadwood-$SNAP
	mv deadwood-$NEXT deadwood-$SNAP
	cd deadwood-$SNAP/src
	./make.version.h > version.h
	cd ../..
	# Alas, my ancient msys environment doesn't have xz
	tar cjf deadwood-$SNAP.tar.bz2 deadwood-$SNAP
	#tar cJf deadwood-$SNAP.tar.xz deadwood-$SNAP
	exit 0
else
	SNAP=$NEXT
	cd deadwood-$NEXT/src
	./make.version.h > version.h
	cd ../..
	tar cjf deadwood-$NEXT.tar.bz2 deadwood-$NEXT
	tar cJf deadwood-$NEXT.tar.xz deadwood-$NEXT
fi

exit 0 # Done
