--- deadwood-3.0.04/src/DwMararc.h.orig	2011-11-01 09:13:19.653935035 -0600
+++ deadwood-3.0.04/src/DwMararc.h	2011-11-01 09:16:11.416688352 -0600
@@ -65,13 +65,14 @@
 #define DWM_N_reject_aaaa 24
 #define DWM_N_reject_mx 25
 #define DWM_N_truncation_hack 26
+#define DWM_N_reject_ptr 27
 
 /* Number of string parameters in the mararc file */
 #define KEY_S_COUNT 7
 /* Number of dictionary parameters in the mararc file */
 #define KEY_D_COUNT 2
 /* Number of numeric parameters in the mararc file */
-#define KEY_N_COUNT 27
+#define KEY_N_COUNT 28
 
 #ifndef MINGW
 /* Location of files we read when we run execfile("foo") */
--- deadwood-3.0.04/src/DwMararc.c.orig	2011-11-01 09:13:26.462934753 -0600
+++ deadwood-3.0.04/src/DwMararc.c	2011-11-01 09:16:26.855682272 -0600
@@ -394,6 +394,7 @@
         key_n[DWM_N_reject_aaaa] = 0;
         key_n[DWM_N_reject_mx] = 1;
         key_n[DWM_N_truncation_hack] = 1;
+        key_n[DWM_N_reject_ptr] = 0;
 }
 
 /* Look for a Mararc parameter; -1 if not found/error; 0-n if found
--- deadwood-3.0.04/src/DwUdpSocket.c.orig	2011-11-01 09:12:51.525933229 -0600
+++ deadwood-3.0.04/src/DwUdpSocket.c	2011-11-01 09:18:36.383708570 -0600
@@ -633,6 +633,7 @@
         uint16_t from_port = 0;
         int32_t local_id = -1;
         dw_str *query = 0, *orig_query = 0;
+	int_fast32_t qtype = 0;
 #ifdef VALGRIND_NOERRORS
         memset(packet,0,522);
 #endif /* VALGRIND_NOERRORS */
@@ -678,6 +679,27 @@
         /* See if we have something in the cache; destroyed at end of
          * function */
         query = dw_get_dname_type(packet,12,len);
+	qtype = dw_fetch_u16(query,-1);
+
+	/* Reject PTR or AAAA queries if not wanted */
+	if((qtype == 28 /* AAAA */ && key_n[DWM_N_reject_aaaa] == 1) ||
+	   (qtype == 12 /* PTR */ && key_n[DWM_N_reject_ptr] == 1)) {
+		unsigned char *answer;
+		answer = make_synth_not_there_answer(packet,&len,0);
+
+	        /* Flag this as an answer */
+       		answer[2] |= 0x80;
+
+	        /* One "NS" record; no other records */
+	        answer[9] = 1;
+	        answer[6] = answer[7] = answer[8] = answer[10] = answer[11] =0;
+		/* Copy over ID */
+                sendto(sock,(void *)answer,len+40,0,(struct sockaddr *)&client,
+                                c_len);
+		free(answer);
+                goto catch_get_local_udp_packet;
+	}	
+
         orig_query = dw_copy(query);
         dwc_lower_case(query);
         dw_log_dwstr("Got DNS query for ",query,100); /* Log it */
@@ -778,8 +800,7 @@
         } else {
                 answer = dw_packet_to_cache(packet,count,is_nxdomain);
                 decomp = dwc_decompress(question,answer);
-                if(dwc_has_bad_ip(decomp,blacklist_dict) ||
-                   (qtype == 28 /* AAAA */ && key_n[DWM_N_reject_aaaa] == 1)) {
+                if(dwc_has_bad_ip(decomp,blacklist_dict)) {
                         ret = -2; /* Tell caller we need synth "not there" */
                         goto catch_cache_dns_reply;
                 }
--- deadwood-3.0.04/doc/Deadwood.ej.orig	2011-11-01 09:20:39.478712425 -0600
+++ deadwood-3.0.04/doc/Deadwood.ej	2011-11-01 09:23:22.376706606 -0600
@@ -347,6 +347,21 @@
 for web surfing (almost 100% A record lookup) and not for mail delivery
 (extensive MX record lookup).
 
+<h2>reject_ptr</h2>
+If this has a value of 1, a bogus SOA "not there" reply is sent whenever
+a PTR query is sent to Deadwood.  In other words, every time a program asks
+Deadwood for "reverse DNS lookup" -- the hostname for a given IP address --
+instead of trying to process the request, when this is set to 1, Deadwood 
+pretends the IP address in question does not have a hostname.
+<p>
+
+This is useful for people who are getting slow DNS timeouts when trying
+to perform a reverse DNS lookups on IPs.
+<p>
+
+This has a default value of 0.  In other words, PTR queries are processed 
+normally unless this is set.
+
 <h2>resurrections</h2>
 If this is set to 1, Deadwood will try to send an 
 expired record to the user before giving up.  If it is 0, we 
