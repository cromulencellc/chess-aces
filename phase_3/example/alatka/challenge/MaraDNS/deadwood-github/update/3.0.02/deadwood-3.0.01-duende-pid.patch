Patch and doc supplied by Yarin, Dec 2010.  Licensed under Deadwood's 2-clause 
BSD license.

--- deadwood-3.0.01/tools/duende.c	2010-09-24 18:45:12.000000000 -0700
+++ deadwood-3.0.02/tools/duende.c	2011-01-14 23:20:55.000000000 -0800
@@ -155,10 +155,19 @@
     int exit_status;
     pid_t pid, log_pid;
     int stream1[2]; /* Used for piping */
+    int exec_argv_offset = 1; /* Also used to determine PID writing */
     if(argv[0] == NULL || argv[1] == NULL) {
-        printf("Usage: duende [program] [arguments]\n");
+        printf("Usage: duende (--pid=/path/to/file) [program] [arguments]\n");
         exit(1);
         }
+    if(!strncasecmp(argv[1],"--pid=",6)) {
+        if(argv[2] == NULL) {
+            printf(
+		"Usage: duende (--pid=/path/to/file) [program] [arguments]\n");
+            exit(1);
+            }
+        exec_argv_offset = 2;
+        }
 
     /* Let children know that duende is running */
     if(setenv("DUENDE_IS_RUNNING","1",0) != 0) {
@@ -173,6 +182,18 @@
     /* The child becomes a full-fledged daemon */
     setpgid(0,0); /* No longer visible in 'ps' without the 'auxw' argument */
 
+    /* Write our PID to a file if the user so desires us to */
+    if(exec_argv_offset == 2) {
+        FILE *fp_pid = fopen(argv[1] + 6,"w");
+        if(!fp_pid) {
+            syslog(LOG_ALERT,"Fatal writing, to PID file, error\n");
+            exit(1);
+            }
+        unsigned int local_pid = getpid();
+        fprintf(fp_pid,"%u",local_pid);
+        fclose(fp_pid);
+        }
+
     /* Sysadmins expect HUP to reload, so we set that up */
     signal(SIGHUP,handle_hup);
     signal(SIGTERM,handle_term);
@@ -202,10 +223,10 @@
                 syslog(LOG_ALERT,"Fatal dup2 error 2");
                 exit(5);
                 }
-            argv[0] = argv[1];
-            execvp(argv[1],argv + 1);
+            argv[0] = argv[exec_argv_offset];
+            execvp(argv[exec_argv_offset],argv + exec_argv_offset);
             /* OK, not found */
-            printf("duende: %s: Command can't run, terminating\n",argv[1]);
+            printf("duende: %s: Command can't run, terminating\n",argv[exec_argv_offset]);
             syslog(LOG_ALERT,"Command can't run, terminating\n");
             exit(1);
             }
@@ -215,7 +236,7 @@
         log_pid = fork();
         if(log_pid == 0) { /* Child to syslog all of MaraDNS' output */
             argv[0] = "duende-log-helper";
-            log_helper(argv[1],stream1[0]);
+            log_helper(argv[exec_argv_offset],stream1[0]);
             syslog(LOG_ALERT,"log_helper finished, terminating\n");
             exit(1);
             }
--- deadwood-3.0.01/doc/Duende.ej	2010-04-28 09:36:14.000000000 -0700
+++ deadwood-3.0.02/doc/Duende.ej	2011-01-14 23:19:09.000000000 -0800
@@ -14,14 +14,17 @@
 LOG_INFO (LOG_ALERT on FreeBSD systems).
 
 <H1>USAGE</H1>
-<b>duende</b> child_process [ all subsequent arguments passed on to child ]
+<b>duende</b> (--pid=/path/to/file) child_process [ all subsequent arguments passed on to child ]
 
 <H1>DETAILS</H1>
 
 When <b>duende</b> is invoked, it spawns two processes.  In addition to
 spawning the daemonized child process, <b>duende</b> also spawns a process
 which reads and logs the standard output of the daemonized process.  The
-parent process stays alive so as to monitor the daemonized process.
+parent process stays alive so as to monitor the daemonized process. If
+the optional <tt>--pid</tt> argument is supplied, <b>duende</b> will write
+it's PID to the file specified by the argument. It is an error to supply
+the <tt>--pid</tt> argument without an equal sign and file name.
 <p>
 <b>duende</b> requires a blank directory named <tt>/etc/maradns/logger</tt> 
 to run.
