When a remote server sends us an empty DNS packet, what does that really
mean? Well, it usually means that the hostname does not always exist. But,
not always.

Let’s take the hostname ibnlive.in.com. It has three DNS servers:
123.108.40.31, 123.108.40.32, and 123.108.40.81. Two of the servers
(123.108.40.32 and 123.108.40.81) do the right thing: They redirect
the name to Akamai’s horrendous mess of DNS resolution. However,
123.108.40.31 is broken and gives us a blank DNS packet with a SERVER
FAIL message.

The DNS administrators for in.com aren’t trying to tell us that
ibnlive.in.com doesn’t resolve. No, they’re trying to tell us that
their DNS administrator is asleep and misconfigured one of their three
DNS servers.

So, I’ve tweaked the heuristics of Deadwood to treat a DNS packet with
a “SERVER FAIL” RCODE as being one where the DNS server is asleep at
the wheel, so instead of treating the packet like “this name does not
exist” (like what we normally do with a blank DNS reply), we ignore
the packet and bug the next DNS server on the list. The code isn’t
perfect: We wait timeout_seconds before contacting the next server, but
it’s good enough to have domains mismanaged like this correctly resolve.

I should note that the bugs I’m finding in Deadwood right now are not
bugs caused by Deadwood not being RFC-compliant—the last bug I fixed
like that was on August 9. No, at this point, I’m fine-tuning Deadwood
to more or less do the right thing with mismanaged domains and broken
DNS servers.

--- deadwood-2.9.06/src/DwUdpSocket.c.orig	2010-09-01 19:11:35.000000000 -0700
+++ deadwood-2.9.06/src/DwUdpSocket.c	2010-09-01 19:15:00.000000000 -0700
@@ -740,7 +740,10 @@
         question = dw_get_dname_type(packet,12,count);
         qtype = dw_fetch_u16(question,-1);
         dw_log_dwstr("Caching a reply for query ",question,1000);
-        if((packet[3] & 0x0f) == 3) {
+	if((packet[3] & 0x0f) == 2) { /* Server FAIL */
+		ret = -1; /* Bad return value; do not cache */
+		goto catch_cache_dns_reply;
+	} else if((packet[3] & 0x0f) == 3) { /* Name error/NXDOMAIN */
                 is_nxdomain = 1;
         }
         if(truncated == 1) {
