--- maradns-2.0.03/tools/duende.c.orig	2011-08-05 05:25:52.122280683 -0500
+++ maradns-2.0.03/tools/duende.c	2011-08-05 05:28:35.597299235 -0500
@@ -1,4 +1,4 @@
-/* Copyright (c) 2003-2008 Sam Trenholme
+/* Copyright (c) 2003-2011 Sam Trenholme and others
  *
  * TERMS
  *
@@ -41,6 +41,7 @@
 #include <sys/wait.h>
 #include <unistd.h>
 #include "../MaraDns.h"
+#include <strings.h> /* strncasecmp */
 
 int got_hup_signal = 0;
 int got_term_signal = 0;
@@ -77,6 +78,14 @@
         printf("%s directory required to exist\n",DUENDE_CHROOT_DIR);
         exit(1);
         }
+/*#if ! (defined __CYGWIN__ || defined QNX || 1 == 2)
+    if(chroot(DUENDE_CHROOT_DIR) != 0) {
+        syslog(LOG_ALERT,"Can not chroot in %s",DUENDE_CHROOT_DIR);
+        printf("Fatal error logging; read syslog\n");
+        printf("%s directory required to exist\n",DUENDE_CHROOT_DIR);
+        exit(1);
+        }
+#endif *//* Chroot disabled -- breaks logging */
     if(setuid(DUENDE_LOGGER_UID) != 0) {
         syslog(LOG_ALERT,"%s%d","Can not change UID to ",DUENDE_LOGGER_UID);
         syslog(LOG_ALERT,"%s","We can not log daemon output");
@@ -147,6 +156,8 @@
     pid_t pid, log_pid;
     int stream1[2]; /* Used for piping */
     int exec_argv_offset = 1; /* Also used to determine PID writing */
+    int wait_pid = -1; /* PID of exited child */
+
     if(argv[0] == NULL || argv[1] == NULL) {
         printf("Usage: duende (--pid=/path/to/file) [program] [arguments]\n");
         exit(1);
@@ -154,7 +165,7 @@
     if(!strncasecmp(argv[1],"--pid=",6)) {
         if(argv[2] == NULL) {
             printf(
-		"Usage: duende (--pid=/path/to/file) [program] [arguments]\n");
+               "Usage: duende (--pid=/path/to/file) [program] [arguments]\n");
             exit(1);
             }
         exec_argv_offset = 2;
@@ -247,17 +258,24 @@
                 exit(0);
                 }
             sleep(1);
-            if(waitpid(pid,&exit_status,WNOHANG) == pid) { /* If child ended */
+            wait_pid = waitpid(-1, &exit_status, WNOHANG);
+            if(wait_pid == pid) { /* If child ended */
                 handle_child_exited(exit_status,log_pid,pid);
                 close(stream1[0]);
                 break; /* Out of the inner loop; re-start Mara */
                 }
             /* If logger terminated */
-            if(waitpid(log_pid,&exit_status,WNOHANG) == log_pid) {
+            if(wait_pid == log_pid) {
                 handle_child_exited(exit_status,pid,log_pid);
                 close(stream1[0]);
                 break; /* Out of the inner loop; re-start Mara */
                 }
+            /* Make sure to reap all children (reported and fixed by Nicholas
+             * Bamber in "ng" release of Duende; backported to "classic"
+             * Duende by Sam Trenholme */
+            else if (wait_pid > 0) {
+                syslog(LOG_ALERT, "unexpected child reaped: %i", wait_pid);
+                }
             }
         }
     }
