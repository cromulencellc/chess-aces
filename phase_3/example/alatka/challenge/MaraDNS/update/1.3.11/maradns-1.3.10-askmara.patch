Improvments by JJS

--- maradns-1.3.11/tools/askmara.c.orig	2008-01-24 16:01:26.000000000 -0600
+++ maradns-1.3.11/tools/askmara.c	2008-01-11 05:52:08.000000000 -0600
@@ -61,6 +61,8 @@
                          1: verbose output; any other value: short output */
 int timeout = 21;
 
+unsigned short dns_port = DNS_PORT;
+
 /* Octal escape any non-ASCII sequences in the askmara output; almost idential
    to show_esc_stdout */
 int escape_stdout(js_string *js) {
@@ -186,33 +188,51 @@
     err = WSAStartup(wVersionRequested, &wsaData);
 #endif /* MINGW32 */
     /* Determine what the query string is */
-    if(argc < 2 || argc > 6)
-        harderror(L_USAGE);
-
-    if(argc >= 3 && *argv[1] == '-' && *(argv[1] + 1) == 'n')
-        nrd = 1;
-
-    /* See if we are in verbose mode or not */
     verbose_mode = 0;
-    if(argc >= 3 + nrd && *argv[1 + nrd] == '-' && *(argv[1 + nrd] + 1) == 'v')
-        verbose_mode = 1;
-
-    /* See if we should allow a user defined timeout or not */
     timeout = 31;
-    if(argc >= 4 + nrd && *argv[1 + nrd] == '-' && *(argv[1 + nrd] + 1) ==
-       't') {
-         timeout = atoi(argv[2 + nrd]);
-         verbose_mode = 2;
-         }
-
-    if(timeout < 1)
-        harderror(L_INVALID_TIMEOUT);
-
-    /* Determine what IP address to connect to */
-    if(argc == 3 + verbose_mode + nrd)
-        server_address = argv[2 + verbose_mode + nrd];
-    else
-        server_address = ASKMARA_DEFAULT_SERVER;
+    server_address = ASKMARA_DEFAULT_SERVER;
+    argc--;
+    argv++;
+    while(argc > 0) {
+        if(argv[0] [0]== '-' && argv[0][1] == 'v')
+            verbose_mode = 1;
+        else if(argv[0][0] == '-' && argv[0][1] == 'n')
+            nrd = 1;
+        else if(argv[0][0] == '-' && argv[0][1] == 'p') {
+            if(argc < 2) {
+                harderror(L_USAGE);
+                }
+            argc--;
+            argv++;
+            dns_port = atoi(*argv);
+            if(dns_port < 1 || dns_port > 32000) {
+                    harderror("Wrong port number\n");
+                }
+            }
+        else if(argv[0][0] == '-' && argv[0][1] == 't') {
+            if(argc < 2) {
+                harderror(L_USAGE);
+                }
+            argc--;
+            argv++;
+            timeout = atoi(*argv);
+            if(timeout < 1)
+               harderror( L_INVALID_TIMEOUT);
+            verbose_mode = 2;
+            }
+        else if (argv[0][0] != '-')
+            break;
+        else
+            harderror(L_USAGE);
+        argc--;
+        argv++;
+        }
+        
+    /* we expect now the query string and possibly the server */
+    if(argc<1)
+        harderror(L_USAGE);
+    if(argc>1)
+        server_address = argv[1];
 
     if((indata = js_create(4512,1)) == 0)
        harderror(L_JS_CREATE_INDATA);
@@ -230,14 +250,14 @@
        useful to be able to contact a MaraDNS server running on a high
        port number.  However, DNS_PORT should be 53 otherwise (defined
        in MaraDNS.h) */
-    dns_udp.sin_port = htons(DNS_PORT);
+    dns_udp.sin_port = htons(dns_port);
     len_inet = sizeof(dns_udp);
 
     if((dns_udp.sin_addr.s_addr = inet_addr(server_address)) == INADDR_NONE) {
 #ifdef AUTHONLY
         memset(&dns_udp6,0,sizeof(dns_udp6));
         dns_udp6.sin6_family = AF_INET6;
-        dns_udp6.sin6_port = htons(DNS_PORT);
+        dns_udp6.sin6_port = htons(dns_port);
         if( inet_pton(AF_INET6, server_address, &dns_udp6.sin6_addr) < 1) {
 #endif
             harderror(L_MAL_IP);
@@ -256,7 +276,7 @@
         }
 
 
-    id = gen_id(argv[1 + verbose_mode]);
+    id = gen_id(argv[0]);
     /* Format a DNS request */
     /* DNS header */
     header.id = id;
@@ -278,7 +298,8 @@
     question.qclass = 1; /* ...on the internet */
     /* We now allow people to specify any numeric record in this format:
      * 40:t1.example.com., where 40 is the numeric rrtype */
-    temp = argv[1 + verbose_mode + nrd];
+
+    temp = argv[0];
     if(temp == 0) {
             printf("Wrong number of arguments to askmara\n");
             exit(43);
@@ -308,8 +329,10 @@
        output */
     if(verbose_mode != 1)
         printf("# ");
-
-    printf("%s%s%s",L_QUERYING,server_address,L_NEWLINE); /* Querying the server with the IP... */
+    if(dns_port==DNS_PORT)
+        printf("%s%s%s",L_QUERYING,server_address,L_NEWLINE); /* Querying the server with the IP... */
+    else
+        printf("%s%s#%d%s",L_QUERYING,server_address,dns_port,L_NEWLINE); /* Querying the server with the IP... */
 
     /* Make 'Aexample.com.' raw UDP data */
 
--- maradns-1.3.11/tools/askmara-tcp.c.orig	2008-01-24 16:01:26.000000000 -0600
+++ maradns-1.3.11/tools/askmara-tcp.c	2008-01-22 01:32:21.000000000 -0600
@@ -30,9 +30,13 @@
 #include <time.h>
 #include <sys/types.h>
 #include <sys/time.h>
+#ifndef MINGW32
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#else
+#include <winsock2.h>
+#endif
 #include "../MaraDns.h"
 /* All of the labels */
 #include "askmara_labels_en.h"
@@ -49,6 +53,8 @@
                          1: verbose output; any other value: short output */
 int timeout = 21;
 
+unsigned short dns_port = DNS_PORT;
+
 /* So -Wall doesn't gag */
 extern int decomp_init();
 
@@ -172,33 +178,53 @@
     int length;
 
     /* Determine what the query string is */
-    if(argc < 2 || argc > 6)
-        harderror(L_USAGE);
-
-    if(argc >= 3 && *argv[1] == '-' && *(argv[1] + 1) == 'n')
-        nrd = 1;
-
-    /* See if we are in verbose mode or not */
     verbose_mode = 0;
-    if(argc >= 3 + nrd && *argv[1 + nrd] == '-' && *(argv[1 + nrd] + 1) == 'v')
-        verbose_mode = 1;
-
-    /* See if we should allow a user defined timeout or not */
     timeout = 31;
-    if(argc >= 4 + nrd && *argv[1 + nrd] == '-' && *(argv[1 + nrd] + 1) ==
-       't') {
-         timeout = atoi(argv[2 + nrd]);
-         verbose_mode = 2;
-         }
-
-    if(timeout < 1)
-        harderror(L_INVALID_TIMEOUT);
+    server_address = "127.0.0.3";
+    argc--;
+    argv++;
+    while(argc > 0) {
+        if(argv[0] [0]== '-' && argv[0][1] == 'v')
+            verbose_mode = 1;
+        else if(argv[0][0] == '-' && argv[0][1] == 'n')
+            nrd = 1;
+        else if(argv[0][0] == '-' && argv[0][1] == 'p') {
+            if(argc < 2) {
+                harderror(L_USAGE);
+                }
+            argc--;
+            argv++;
+            dns_port = atoi(*argv);
+            if(dns_port < 1 || dns_port > 32000) {
+                    harderror("Wrong port number\n");
+                }
+            }
+        else if(argv[0][0] == '-' && argv[0][1] == 't') {
+            if(argc < 2) {
+                harderror(L_USAGE);
+                }
+            argc--;
+            argv++;
+            timeout = atoi(*argv);
+            if(timeout < 1)
+               harderror( L_INVALID_TIMEOUT);
+            verbose_mode = 2;
+            }
+        else if (argv[0][0] != '-')
+            break;
+        else
+            harderror(L_USAGE);
+        argc--;
+        argv++;
+        }
+        
+    /* we expect now the query string and possibly the server */
+    if(argc<1)
+        harderror(L_USAGE);
 
     /* Determine what IP address to connect to */
-    if(argc == 3 + verbose_mode + nrd)
-        server_address = argv[2 + verbose_mode + nrd];
-    else
-        server_address = "127.0.0.3";
+    if(argc>1)
+        server_address = argv[1];
 
     if((indata = js_create(512,1)) == 0)
        harderror(L_JS_CREATE_INDATA);
@@ -220,7 +246,7 @@
             harderror(L_SOCKET);
 
         server.sin6_family = AF_INET6;
-        server.sin6_port = htons(DNS_PORT);
+        server.sin6_port = htons(dns_port);
         if( inet_pton(AF_INET6, server_address, &server.sin6_addr) < 1) {
             harderror(L_MAL_IP);
             }
@@ -230,7 +256,7 @@
         if((s = socket(PF_INET,SOCK_STREAM,0)) == -1)
             harderror(L_SOCKET);
         ((struct sockaddr_in*)&server)->sin_family = AF_INET;
-        ((struct sockaddr_in*)&server)->sin_port = htons(DNS_PORT);
+        ((struct sockaddr_in*)&server)->sin_port = htons(dns_port);
         if((((struct sockaddr_in*)&server)->sin_addr.s_addr = inet_addr(server_address)) == INADDR_NONE)
             harderror(L_MAL_IP);
         len_inet = sizeof(struct sockaddr_in);
@@ -244,14 +270,13 @@
        useful to be able to contact a MaraDNS server running on a high
        port number.  However, DNS_PORT should be 53 otherwise (defined
        in MaraDNS.h) */
-    server.sin_port = htons(DNS_PORT);
+    server.sin_port = htons(dns_port);
     if((server.sin_addr.s_addr = inet_addr(server_address)) == INADDR_NONE)
         harderror(L_MAL_IP);
     len_inet = sizeof(struct sockaddr_in);
 #endif
 
-
-    id = gen_id(argv[1 + verbose_mode]);
+    id = gen_id(argv[0]);
     /* Format a DNS request */
     /* DNS header */
     header.id = id;
@@ -271,15 +296,17 @@
     /* Create a DNS question , and put it in raw UDP format */
     /* DNS question -> looking up an A record... */
     question.qclass = 1; /* ...on the internet */
-    if(js_qstr2js(question.qname,argv[1 + verbose_mode + nrd]) == JS_ERROR)
+    if(js_qstr2js(question.qname,argv[0]) == JS_ERROR)
         harderror(L_INVALID_Q); /* Invalid query */
 
     /* Make sure that the csv1-compatible output hashes all non-RR
        output */
     if(verbose_mode != 1)
         printf("# ");
-
-    printf("%s%s%s",L_QUERYING,server_address,L_NEWLINE); /* Querying the server with the IP... */
+    if(dns_port==DNS_PORT)
+        printf("%s%s%s",L_QUERYING,server_address,L_NEWLINE); /* Querying the server with the IP... */
+    else
+        printf("%s%s#%d%s",L_QUERYING,server_address, dns_port,L_NEWLINE); /* Querying the server with the IP... */
 
     /* Make 'Aexample.com.' raw UDP data */
 
@@ -330,8 +357,6 @@
            id = header.id + 1;
            }
 
-        printf("DEBUG ID: %d header.id: %d\n",id,header.id);
-
         attempts--;
 
         /* If the id doesn't match, get a reply again */
