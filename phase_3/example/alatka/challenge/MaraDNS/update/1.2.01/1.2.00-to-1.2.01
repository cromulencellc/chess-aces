#!/bin/bash -e

# This script updates MaraDNS 1.2

# To run this script, make sure that this script is in the directory
# containing the tarball for the version of MaraDNS you wish to update, and
# all of the patches are in a directory entitled 'patches'.

# For example, to update MaraDNS 1.2.00 to 1.2.01, make sure 
# maradns-1.2.00.tar.lz is in the same directory as this script, and
# that the directory containing this script has a directory called
# "patches/" which has all of the maradns-1.2.00*.patch files.

# You will need to have lzma on your system to run this script

# Get the current and next version number

CURRENT=${0%%-*}
CURRENT=${CURRENT##*/}
NEXT=${0##*-}

# Make a clean CURRENT install, which we rename NEXT
rm -fr maradns-$CURRENT 2> /dev/null
echo extracting tarball
cat maradns-$CURRENT.tar.lzma | lzma d -si -so | tar xf -
if [ $? != 0 ] ; then
	echo run this from the correct directory
	exit 1
fi
rm -fr maradns-$NEXT*
mv maradns-$CURRENT maradns-$NEXT
cd maradns-$NEXT

# The patches

mkdir update/$NEXT
cp ../patches/maradns-$CURRENT* update/$NEXT

# This is one of the few places where we will need to change anything
# in this script from version to version

echo applying patches

# Patch #1: Clarify that typos can also generate dangling CNAME errors
patch -p1 < update/1.2.01/maradns-1.2.00-dangling_doc.patch

# Patch #2: Spurious dangling CNAME bug (found by Alex Kapranoff)
patch -p1 < update/1.2.01/maradns-1.2.00-dangling_bug.patch

# Patch #3: Alex Kapranoff's patch for compiling on FreeBSD
patch -R -p1 < update/1.2.01/maradns-1.2.00-freebsd.patch

# Patch #4: Remove outdated information from MaraDNS GPG key
patch -p1 < update/1.2.01/maradns-1.2.00-gpg.key.patch

# Patch: Update changelog (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-changelog.patch

# Not a patch: Remove file which doesn't have clear MaraDNS-compatible
# license
rm doc/en/webpage/styleswitcher.js

echo updating documentation

# Update the documentation
cd doc/en
make
cd man
make
./make.pdf
cd ../tutorial
make
cd ../text
make
# Go back to the maradns dir
cd ../../..

rm CHANGELOG
ln -s doc/en/changelog.txt CHANGELOG

# Go one level higher than the toplevel directory to copy this script
# over
cd ..

# Put this script in the "build" directory
cp $0 maradns-$NEXT/update/$NEXT

if [ "$1" != "go" ] ; then
	echo OK, maradns-$NEXT built.  Confirm this compiles and	
	echo perform basic regression before re-running this to make
	echo the tarballs.  Once you have tested this, rerun this 
	echo script as: $0 go
	exit 0
fi

# Build the tarballs
echo making new tarballs

tar cjf maradns-$NEXT.tar.bz2 maradns-$NEXT
tar czf maradns-$NEXT.tar.gz maradns-$NEXT

echo using exotic compression
tar cf maradns-$NEXT.tar maradns-$NEXT

# All of the compression we actually use was originally written by 
# Igor Pavlov for the 7-zip compression suite
#echo shrinking .gz tarball
#advdef -z -3 maradns-$NEXT.tar.gz

echo lzma compression \(this will take about 5 minutes\)
date
# To decompress: cat file.tar.lzma | lzma d -si -so | tar xvf -
# -d20 makes the file almost as small as -d22, but uses 1/4 of the memory
# (only a little over one meg needed for decompression)
lzma e maradns-$NEXT.tar maradns-$NEXT.tar.lzma -a2 -d20 -fb255
date
echo

exit 0

# The other exotic compressors can't be run in a pipeline

echo 7zip compression
date
7za a maradns-$NEXT.tar.7z maradns-$NEXT.tar
date
echo

echo paq6 compression \(This will take 2\-3 minutes\)
date
paq6v2 -2 maradns-$NEXT.tar.pq6 maradns-$NEXT.tar
date
echo

echo rzip compression
date
rzip maradns-$NEXT.tar
date
echo
