#ifndef __CPU_HPP__
#define __CPU_HPP__
#include "memory.hpp"
#include "register.hpp"
#include "utils.hpp"
#include <stdint.h>
#include <iostream>
#include <map>
#include <capstone/capstone.h>
#include <capstone/platform.h>
int sign_extend(uint64_t in, uint64_t *out, uint64_t size);
class Cpu {
public:
  Memory *mem;
  csh handle;
  cs_insn *insn;
  void *fs_segment;
  void *gs_segment;
  reg _rax;
  reg _rcx;
  reg _rdx;
  reg _rbx;
  reg _rsp;
  reg _rbp;
  reg _rdi;
  reg _rsi;
  reg _rip;
  reg _r8;
  reg _r9;
  reg _r10;
  reg _r11;
  reg _r12;
  reg _r13;
  reg _r14;
  reg _r15;
  reg _ymm0;
  reg _ymm1;
  reg _ymm2;
  reg _ymm3;
  reg _ymm4;
  reg _ymm5;
  reg _ymm6;
  reg _ymm7;
  reg _ymm8;
  reg _ymm9;
  reg _ymm10;
  reg _ymm11;
  reg _ymm12;
  reg _ymm13;
  reg _ymm14;
  reg _ymm15;
  reg _ymm16;
  reg _ymm17;
  reg _ymm18;
  reg _ymm19;
  reg _ymm20;
  reg _ymm21;
  reg _ymm22;
  reg _ymm23;
  reg _ymm24;
  reg _ymm25;
  reg _ymm26;
  reg _ymm27;
  reg _ymm28;
  reg _ymm29;
  reg _ymm30;
  reg _ymm31;
  reg _rflags;
  reg _cs;
  reg _ss;
  reg _ds;
  reg _es;
  reg _fs;
  reg _gs;
  std::map<std::string, reg *> mapToRegClass;
  std::map<std::string, rtype *> mapToRegStruct;
  uint8_t cf;
  uint8_t pf;
  uint8_t af;
  uint8_t zf;
  uint8_t sf;
  uint8_t tf;
  uint8_t iff;
  uint8_t df;
  uint8_t of;
  uint8_t iopl;
  uint8_t nt;
  uint64_t rdtsc_value;
  std::map<std::string, std::string> regToReg64;
  Cpu(Memory *mem);
  Cpu();
  ~Cpu();
  void setupRegMap();
  std::string mapToReg64(std::string reg);
  void setupRegClassMap(void);
  bool isReg(std::string reg);
  void init_fs_segment(void);
  int can_exec(uint64_t addr);
  void printState();
  void printStateGDB();
  void printExtendedState();
  uint64_t setreg(std::string reg, uint64_t value);
  uint256_t setreg(std::string reg, uint256_t value);
  uint64_t getreg(std::string reg);
  uint256_t getymm(std::string reg);
  uint64_t step(uint64_t print_flag);
  int read_segment_mem(std::string reg, uint64_t offset, char *value,
                       uint64_t length);
  int write_segment_mem(std::string reg, uint64_t offset, char *data,
                        uint64_t length);
  int read_mem_operand(cs_x86_op *readop, uint64_t *value);
  int read_mem_operand(cs_x86_op *readop, uint256_t *value);
  int write_mem_operand(cs_x86_op *writeop, uint64_t value);
  int write_mem_operand(cs_x86_op *writeop, uint256_t value);
  int add(cs_insn *insn);
  int and_ins(cs_insn *insn);
  int bsf(cs_insn *insn);
  int bsr(cs_insn *insn);
  int bt(cs_insn *insn);
  int call(cs_insn *insn);
  int cdqe(cs_insn *insn);
  int clc(cs_insn *insn);
  int cmova(cs_insn *insn);
  int cmovb(cs_insn *insn);
  int cmovbe(cs_insn *insn);
  int cmove(cs_insn *insn);
  int cmovne(cs_insn *insn);
  int cmovs(cs_insn *insn);
  int cmp(cs_insn *insn);
  int cmpxchg(cs_insn *insn);
  int cpuid(cs_insn *insn);
  int cqo(cs_insn *insn);
  int dec(cs_insn *insn);
  int div_ins(cs_insn *insn);
  int ret(cs_insn *insn);
  int movaps(cs_insn *insn);
  int idiv(cs_insn *insn);
  int imul(cs_insn *insn);
  int imul_single(cs_insn *insn);
  int imul_double(cs_insn *insn);
  int imul_triple(cs_insn *insn);
  int inc(cs_insn *insn);
  int jae(cs_insn *insn);
  int ja(cs_insn *insn);
  int jbe(cs_insn *insn);
  int jb(cs_insn *insn);
  int je(cs_insn *insn);
  int jge(cs_insn *insn);
  int jg(cs_insn *insn);
  int jle(cs_insn *insn);
  int jl(cs_insn *insn);
  int jmp(cs_insn *insn);
  int jne(cs_insn *insn);
  int js(cs_insn *insn);
  int lea(cs_insn *insn);
  int leave(cs_insn *insn);
  int or_ins(cs_insn *insn);
  int sub(cs_insn *insn);
  int xor_ins(cs_insn *insn);
  int movd(cs_insn *insn);
  int movq(cs_insn *insn);
  int paddd(cs_insn *insn);
  int paddq(cs_insn *insn);
  int pcmpeqb(cs_insn *insn);
  int pcmpeqd(cs_insn *insn);
  int pcmpgtd(cs_insn *insn);
  int pmovmskb(cs_insn *insn);
  int pslld(cs_insn *insn);
  int psllq(cs_insn *insn);
  int psubb(cs_insn *insn);
  int punpckhdq(cs_insn *insn);
  int punpckldq(cs_insn *insn);
  int pxor(cs_insn *insn);
  int mov(cs_insn *insn);
  int movdqa(cs_insn *insn);
  int movdqu(cs_insn *insn);
  int movss(cs_insn *insn);
  int movsx(cs_insn *insn);
  int movsxd(cs_insn *insn);
  int movups(cs_insn *insn);
  int movzx(cs_insn *insn);
  int mul(cs_insn *insn);
  int neg(cs_insn *insn);
  int nop(cs_insn *insn);
  int not_ins(cs_insn *insn);
  int pop(cs_insn *insn);
  int pslldq(cs_insn *insn);
  int punpckhqdq(cs_insn *insn);
  int punpcklqdq(cs_insn *insn);
  int push(cs_insn *insn);
  int rdtsc(cs_insn *insn);
  int rol(cs_insn *insn);
  int ror(cs_insn *insn);
  int sar(cs_insn *insn);
  int sbb(cs_insn *insn);
  int seta(cs_insn *insn);
  int setb(cs_insn *insn);
  int sete(cs_insn *insn);
  int setg(cs_insn *insn);
  int setne(cs_insn *insn);
  int shl(cs_insn *insn);
  int shr(cs_insn *insn);
  int stc(cs_insn *insn);
  int stosq(cs_insn *insn);
  int syscall(cs_insn *insn);
  int test(cs_insn *insn);
  int tzcnt(cs_insn *insn);
  int vmovd(cs_insn *insn);
  int vmovdqa(cs_insn *insn);
  int vmovdqu(cs_insn *insn);
  int vpbroadcastb(cs_insn *insn);
  int vpcmpeqb(cs_insn *insn);
  int vpminub(cs_insn *insn);
  int vpmovmskb(cs_insn *insn);
  int vpor(cs_insn *insn);
  int vpxor(cs_insn *insn);
  int vzeroupper(cs_insn *insn);
  int xgetbv(cs_insn *insn);
};
#endif